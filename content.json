{"meta":{"title":"鲸落","subtitle":"","description":"个人笔记Hexo静态博客,记录学习各种编程笔记和过程,偶尔致敬生活.","author":"鲸落","url":"https://ebig.vip","root":"/"},"pages":[{"title":"","date":"2020-10-13T07:23:07.633Z","updated":"2020-10-13T07:23:07.633Z","comments":true,"path":"MsgBoard/index.html","permalink":"https://ebig.vip/MsgBoard/index.html","excerpt":"","text":"留 言 板"},{"title":"","date":"2020-12-16T09:01:49.819Z","updated":"2020-09-29T05:11:06.250Z","comments":true,"path":"404.html","permalink":"https://ebig.vip/404.html","excerpt":"","text":"页面未找到 很抱歉，您访问的页面不存在 请确认不是输入地址有误或该地址已被删除？"},{"title":"","date":"2020-09-30T04:19:23.080Z","updated":"2020-09-30T04:19:23.080Z","comments":false,"path":"announce/index.html","permalink":"https://ebig.vip/announce/index.html","excerpt":"","text":"公 告 2020-09-30 本站正在不断的努力优化中… 若有报错之处，还请留言告知。 感谢您的支持！ 之前 公告记录缺失！"},{"title":"","date":"2020-09-14T04:48:37.202Z","updated":"2020-05-26T13:45:31.000Z","comments":true,"path":"archives/index.html","permalink":"https://ebig.vip/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-09-14T07:42:54.056Z","updated":"2020-09-14T07:42:54.056Z","comments":true,"path":"categories/index.html","permalink":"https://ebig.vip/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-10-15T06:11:32.406Z","updated":"2020-10-15T06:11:32.406Z","comments":false,"path":"artitalk/index.html","permalink":"https://ebig.vip/artitalk/index.html","excerpt":"","text":"new Artitalk({ appId: 'LsVyGClX0KpYsrymggJfKxcW-gzGzoHsz', appKey: 'De3cIKO1x4kotto8QUGgtSqq', serverURL: 'https://leancloud.ebig.vip', pageSize: 6, shuoPla: '想说点啥呢~', atEmoji: { //xaoxuu表情 weibo-doge: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/weibo/weibo-1.png\", weibo-doge-tuosai: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/weibo/weibo-2.png\", weibo-doge-shengqi: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/weibo/weibo-3.png\", weibo-doge-tushe: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/weibo/weibo-4.png\", aru-1: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-1.gif\", aru-2: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-2.gif\", aru-3: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-3.gif\", aru-4: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-4.gif\", aru-5: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-5.gif\", aru-6: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-6.gif\", aru-7: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-7.gif\", aru-8: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-8.gif\", aru-9: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-9.gif\", aru-10: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-10.gif\", aru-11: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-11.gif\", aru-12: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-12.gif\", aru-13: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-13.gif\", aru-14: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-14.gif\", aru-15: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-15.gif\", aru-16: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-16.gif\", aru-17: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-17.gif\", aru-18: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-18.gif\", aru-19: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-19.gif\", aru-20: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-20.gif\", aru-21: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-21.gif\", aru-22: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-22.gif\", aru-23: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-23.gif\", aru-24: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-24.gif\", aru-25: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-25.gif\", aru-26: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-26.gif\", aru-27: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-27.gif\", aru-28: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-28.gif\", aru-29: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-29.gif\", aru-30: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-30.gif\", aru-31: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-31.gif\", aru-32: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-32.gif\", aru-33: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-33.gif\", aru-34: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-34.gif\", aru-35: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-35.gif\", aru-36: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-36.gif\", aru-37: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-37.gif\", aru-38: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-38.gif\", aru-39: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-39.gif\", aru-40: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-40.gif\", aru-41: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-41.gif\", aru-42: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-42.gif\", aru-43: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-43.gif\", aru-44: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-44.gif\", aru-45: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-45.gif\", aru-46: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-46.gif\", aru-47: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-47.gif\", aru-48: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-48.gif\", aru-49: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-49.gif\", aru-50: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-50.gif\", aru-51: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-51.gif\", aru-52: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-52.gif\", aru-53: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-53.gif\", aru-54: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-54.gif\", aru-55: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-55.gif\", aru-56: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-56.gif\", aru-57: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-57.gif\", aru-58: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-58.gif\", aru-59: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-59.gif\", aru-60: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-60.gif\", aru-61: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-61.gif\", aru-62: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-62.gif\", aru-63: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-63.gif\", aru-64: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-64.gif\", aru-65: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-65.gif\", aru-66: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-66.gif\", aru-67: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-67.gif\", aru-68: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-68.gif\", aru-69: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-69.gif\", aru-70: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-70.gif\", aru-71: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-71.gif\", aru-72: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-72.gif\", aru-73: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-73.gif\", aru-74: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-74.gif\", aru-75: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-75.gif\", aru-76: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-76.gif\", aru-77: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-77.gif\", aru-78: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-78.gif\", aru-79: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-79.gif\", aru-80: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-80.gif\", aru-81: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-81.gif\", aru-82: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-82.gif\", aru-83: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-83.gif\", aru-84: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-84.gif\", aru-85: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-85.gif\", aru-86: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-86.gif\", aru-87: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-87.gif\", aru-88: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-88.gif\", aru-89: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-89.gif\", aru-90: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-90.gif\", aru-91: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-91.gif\", aru-92: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-92.gif\", aru-93: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-93.gif\", aru-94: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-94.gif\", aru-95: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-95.gif\", aru-96: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-96.gif\", aru-97: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-97.gif\", aru-98: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-98.gif\", aru-99: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-99.gif\", aru-100: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-100.gif\", aru-101: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-101.gif\", aru-102: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-102.gif\", aru-103: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-103.gif\", aru-104: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-104.gif\", aru-105: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-105.gif\", aru-106: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-106.gif\", aru-107: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-107.gif\", aru-108: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-108.gif\", aru-109: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-109.gif\", aru-110: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-110.gif\", aru-111: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-111.gif\", aru-112: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-112.gif\", aru-113: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-113.gif\", aru-114: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-114.gif\", aru-115: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-115.gif\", aru-116: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-116.gif\", }, })"},{"title":"所有标签","date":"2020-09-14T07:42:41.820Z","updated":"2020-09-14T07:42:41.820Z","comments":true,"path":"tags/index.html","permalink":"https://ebig.vip/tags/index.html","excerpt":"","text":""},{"title":"软件工具下载","date":"2020-09-29T04:45:41.115Z","updated":"2020-09-29T04:45:41.115Z","comments":true,"path":"download/index.html","permalink":"https://ebig.vip/download/index.html","excerpt":"","text":"谷歌访问助手2018百试不厌，还能用。 本站下载 Axure RP.v3654Axure RP是一款专业的快速原型设计工具。RP则是Rapid Prototyping（快速原型）的缩写。 官网下载链接 本文件集成了汉化以及授权码。 本站下载 ScreenToGif.v2.19.3电脑端录制制作gif图片! 官网下载链接 由于官网的下载速度过慢，故上传至此。 本站下载 Git.v2.25官网下载链接 由于官网的下载速度过慢，故上传至此。 本站下载 sublime Text.v3211官网下载链接 由于官网的下载速度过慢，故上传至此。 本站下载 xshell 和 xftp官网下载链接 下方链接是 家庭和学校用户的免费许可证版 本站下载"},{"title":"","date":"2020-10-13T06:16:43.778Z","updated":"2020-10-13T06:16:43.778Z","comments":true,"path":"friends/index.html","permalink":"https://ebig.vip/friends/index.html","excerpt":"友 链","text":"友 链 来自Gitee 友链添加流程 申请网站需符合以下规则 符合法律法规！ 链接不得无法打开，或者内容质量低下 需要强制 https 协议 添加本站友链，直到不符合申请规则或单方面取消 添加本站到您的友链中123456名称：鲸落链接: https://ebig.vip头像: https://wbig.gitee.io/cdn/img/assets/avatar.jpg描述: 无论走到哪里都应该记住，过去都是假的！标签: Web前端博客截图:https://wbig.gitee.io/cdn/img/assets/screenshot.png优化图片加载速度为了提高图片加载速度，建议优化头像和截图：打开 压缩图 上传自己的头像，将图片尺寸调整到 96px 后下载。将压缩后的图片上传到 去不 图床 并使用此图片链接作为头像。重复上述步骤，把压缩网站截图并把尺寸调整到 540x360 以下。按照格式添加友链12345678&#123; &quot;title&quot;: &quot;&quot;, &quot;screenshot&quot;: &quot;&quot;, &quot;url&quot;: &quot;&quot;, &quot;avatar&quot;: &quot;&quot;, &quot;description&quot;: &quot;&quot;, &quot;keywords&quot;: &quot;&quot;&#125; 二选其一 动态提交 Gitee Issue静态评论区添加待审核通过 申请符合要求，互加好友成功。 感谢支持！还请多多指导。"},{"title":"","date":"2020-10-15T07:11:12.460Z","updated":"2020-10-15T07:11:12.460Z","comments":false,"path":"history/index.html","permalink":"https://ebig.vip/history/index.html","excerpt":"","text":"建 站 史 2020-10-13 更改说说api地址 2020-10-13 增加动态添加友链 2020-10-12 修改站内图片路径 部分文章删除重做 2020-09-30 修改源文件样式适配超小屏 增加了公告历史页面 2020-09-29 升级主题到4.0.0正式版 迁移Github图床到Gitee 2020-09-15 域名访问加速失败 Gitee部署自定义域名失败！ 重新部署到 Github 首页图标换用 icon 增加评论QQ提醒功能 增加了留言板页面 增加了建站史页面 2020-09-14 部署 Gitee 使用Artitalk增加了说说页面，没事可以自己说两句 增加评论管理以及邮件提醒 全站使用Leancloud进行网站访问统计 2020-09-01 部署 Coding 失败！ 2020-08-20 升级4.0-beta版 2020-03-23 - 2020-08-20 文件记录缺失！ 2020-03-23 删除日历云生成 增加站内导航 增加分类雷达图 2020-03-17 修改volantis主题源文件 2020-03-16 更新同作者最新主题volantis 2020-02-15 舍弃七牛云，使用PicGo配置Github图床 2020-02-09 网站ICP备案成功 2020-02-01 文章专属归类文件夹 2020-01-23 使用Hexo部署成功！ 2020-01-16 建站探索"}],"posts":[{"title":"Github 多分支下载","slug":"plugins/git-files-down","date":"2020-11-17T07:23:00.000Z","updated":"2020-11-17T09:10:32.753Z","comments":true,"path":"plugins/git-files-down/","link":"","permalink":"https://ebig.vip/plugins/git-files-down/","excerpt":"一行命令实现github仓库多分支下载","text":"单分支下载略 1234567git clone [url]# 查看所有远程分支git branch -r# 根据分支名称切换分支git checkout [分支名]# 拉取git pull 多分支下载经过搜索，大部分都是上述代码，并没有实现一次多分支下载任务。 经过不懈努力，看到了引用的此篇文章 如何使用Git克隆GitHub仓库的所有分支，让我突然醒悟，命令可以和linux命令一起使用。 1for b in `git branch -r | grep -v -- &#x27;-&gt;&#x27;`; do git branch --track $&#123;b##origin/&#125; $b; done 这句代码在文章中有详细的解释，作用就是讲分支信息去掉重复的 origin存到 ./git/config中，即将远程分支存到本地。 效果图 ./git/config123456789101112# ./git/config中的改动[branch &quot;master&quot;] remote = origin merge = refs/heads/master[branch &quot;1.课程准备&quot;] remote = origin merge = refs/heads/1.课程准备[branch &quot;10.v-on指令的修饰符&quot;] remote = origin merge = refs/heads/10.v-on指令的修饰符# ...省略 思路一【失败】第一想法，在获取分支信息加入 .git/config/的同时，在该目录下同时下载同名文件夹，然后进入该文件夹，进行拉取信息。 因为没做出来，就不贴图了，将代码放这。 1for b in `git branch -r | grep -v -- &#x27;-&gt;&#x27;`; do git branch --track $&#123;b##origin/&#125; $b; mkdir $&#123;b##origin/&#125;; cd $&#123;b##origin/&#125;; git checkout $&#123;b##origin/&#125;; git pull; cd ..; done 失败的原因也只是懂一个大概，因为对git使用也没有深入过 ，好像是因为，在本地仓库文件夹下创建了文件夹，本地存在，但是仓库并不存在，如果进入进行拉取等系列操作，就会与远程仓库的版本不一致，因此并没有办法进行，需要重新提交等操作，让本地仓库与远程仓库保持一致。 一顿操作，没有解决。毕竟也不是我的仓库，而且我只是取资料，并不是提交修改远程仓库，这样不好。 思路二【可行】其实回到那篇文章，那篇文章让我知道，git命令可以与 linux命令一起操作，那既然如此，我不修改本地仓库不就好了。因此，采用迂回操作，目录创建在其他地方，让拉取下来的文件复制过去。如此循环，测试表明可行 代码如下： 1for b in `git branch -r | grep -v -- &#x27;-&gt;&#x27;`; do git branch --track $&#123;b##origin/&#125; $b; mkdir ../new/$&#123;b##origin/&#125;; git checkout $&#123;b##origin/&#125;; git pull; cp -rf ./ ../new/$&#123;b##origin/&#125;; done 我将文件放在了上级的 new 文件下, 而且此文件夹 需要提前创建好代码不能换行，这是一行代码改动位置，只需要将 ../new 这个改为你要存的路径就好，不能是本地仓库下的任何路径 图略。","categories":[{"name":"工具技巧","slug":"工具技巧","permalink":"https://ebig.vip/categories/%E5%B7%A5%E5%85%B7%E6%8A%80%E5%B7%A7/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://ebig.vip/tags/Git/"}]},{"title":"异步处理的通用模型","slug":"web/js-promise","date":"2020-10-24T10:23:00.000Z","updated":"2020-11-17T07:36:59.249Z","comments":true,"path":"web/js-promise/","link":"","permalink":"https://ebig.vip/web/js-promise/","excerpt":"ES官方参考了大量的异步场景，总结出了一套异步的通用模型，该模型可以覆盖几乎所有的异步场景，甚至是同步场景。 值得注意的是，为了兼容旧系统，ES6 并不打算抛弃掉过去的做法，只是基于该模型推出一个全新的 API，使用该API，会让异步处理更加的简洁优雅。 理解该 API，最重要的，是理解它的异步模型","text":"ES官方参考了大量的异步场景，总结出了一套异步的通用模型，该模型可以覆盖几乎所有的异步场景，甚至是同步场景。 值得注意的是，为了兼容旧系统，ES6 并不打算抛弃掉过去的做法，只是基于该模型推出一个全新的 API，使用该API，会让异步处理更加的简洁优雅。 理解该 API，最重要的，是理解它的异步模型 两个阶段ES6 将某一件可能发生异步操作的事情，分为两个阶段：unsettled 和 settled unsettled未决阶段，表示事情还在进行前期的处理，并没有发生通向结果的那件事 settled已决阶段，事情已经有了一个结果，不管这个结果是好是坏，整件事情无法逆转 事情总是从 未决阶段 逐步发展到 已决阶段的。并且，未决阶段拥有控制何时通向已决阶段的能力。 三种状态ES6将事情划分为三种状态： pending、resolved、rejected pending挂起，处于未决阶段，则表示这件事情还在挂起（最终的结果还没出来） resolved已处理，已决阶段的一种状态，表示整件事情已经出现结果，并是一个可以按照正常逻辑进行下去的结果 rejected已拒绝，已决阶段的一种状态，表示整件事情已经出现结果，并是一个无法按照正常逻辑进行下去的结果，通常用于表示有一个错误 既然未决阶段有权力决定事情的走向，因此，未决阶段可以决定事情最终的状态！ 两个已决状态过程我们将 把事情变为resolved状态的过程叫做：resolve，推向该状态时，可能会传递一些数据 我们将 把事情变为rejected状态的过程叫做：reject，推向该状态时，同样可能会传递一些数据，通常为错误信息 始终记住，无论是阶段，还是状态，是不可逆的！ 当事情达到已决阶段后，通常需要进行后续处理，不同的已决状态，决定了不同的后续处理。 resolved 状态这是一个正常的已决状态，后续处理表示为 thenable rejected 状态这是一个非正常的已决状态，后续处理表示为 catchable 后续处理可能有多个，因此会形成作业队列，这些后续处理会按照顺序，当状态到达后依次执行。 整件事称之为Promise，理解概念，对学习Promise至关重要！ Promise前提 未决阶段的处理函数是 同步 的，会立即执行 thenable和catchaable函数 是 异步 的，就算是立即执行，也会加到事件队列中等待执行，并且是微队列 promise.then 可以只添加thenable函数，promise.catch可以单独添加catchable函数 在未决阶段的处理函数中，如果发生未捕获的错误，会将状态推向 rejected，并会被catchable捕获 一旦状态推向已决状态，无法更改 Promise没有消除回调，只是变得可控 不设置回调函数，Promise内部跑出的错误，不会反映到外部 当处于Pending状态时，无法得知目前进展到哪一个阶段 使用1234567891011const promise = new Promise((resolve, reject) =&gt; &#123; // 未决阶段的处理 // resolve函数将状态推向已决阶段的resolved状态 // reject函数将状态推向已决阶段的rejected状态 // 函数，均可传递最多一个参数，表示推向状态的数据 &#125;)promise.then(data =&gt; &#123; // thenable函数，data为状态数据&#125;, err =&gt; &#123; // catchable函数，err为状态数据&#125;) Promise的串联后续的promise需要 前面promise实例的结果 Promise对象中，无论是then，还是catch方法，都是具有返回值的，返回值为 新的promise对象，满足规则如下： 当前Promise状态 新的Promise状态 挂起状态 挂起状态 已决状态，运行相应的后续处理函数 后续处理后的结果作为resolved(rejected)数据，用到Promise 后续Promise 一定会等到前面的Promise有了后续处理结果后，才会变成已决状态 Promise 的其他api原型成员 (实例成员) then catch finally [ES2018]注册一个后续处理函数（无参），当Promise为已决时运行该函数 构造函数成员 （静态成员）resolve(数据)该方法返回一个resolved状态的Promise，传递的数据作为状态数据。 12const pro = Promise.resolve(1);console.log(pro) // resolved状态，且数据为 1 特殊情况：如果传递的数据是Promise，则直接返回传递的Promise对象 12345678const pro = Promise.resolve(1);const p = Promise.resolve(pro);console.log(p === pro) // true// reject() 也是 true reject(数据)该方法返回一个rejected状态的Promise，传递的数据作为状态数据。 all(iterable)这个方法返回一个新的promise对象，该promise对象在iterable参数对象里所有的promise对象都成功的时候才会触发成功，一旦有任何一个iterable里面的promise对象失败则立即触发该promise对象的失败。 这个新的promise对象在触发成功状态以后，会把一个包含iterable里所有promise返回值的数组作为成功回调的返回值，顺序跟iterable的顺序保持一致。 如果这个新的promise对象触发了失败状态，它会把iterable里第一个触发失败的promise对象的错误信息作为它的失败错误信息。 Promise.all方法常被用于处理多个promise对象的状态集合 race(iterable)当iterable参数里的任意一个子promise被成功或失败后，父promise马上也会用子promise的成功返回值或失败详情作为参数调用父promise绑定的相应句柄，并返回该promise对象。 async 和 await不知道说啥，就举个简单的例子，留这吧。 简洁写法复杂写法123456789101112131415161718192021222324252627// 延迟函数function delay(duration)&#123; return new Promise(resolve =&gt; &#123; setTimeout(() =&gt; &#123; resolve(); &#125;, duration) &#125;)&#125;function express(girl)&#123; console.log(`向$&#123;girl&#125;表白了`); await delay(500); return Math.random() &lt; 0.3;&#125;(async () =&gt; &#123; const girls = [&#x27;女孩2&#x27;,&#x27;女孩3&#x27;,&#x27;女孩4&#x27;,&#x27;女孩5&#x27;,&#x27;女孩6&#x27;]; for(let i = 0; i &lt; girls.length; i++)&#123; const result = await express(girls[i]); if(result)&#123; console.log(`$&#123;girls[i]&#125;同意了，不表白了！`); break; &#125;else &#123; console.log(`$&#123;girls[i]&#125;没有同意`); &#125; &#125;&#125;)()12345678910111213141516171819202122232425function express(girl)&#123; return new Promise(resolve =&gt; &#123; console.log(`向$&#123;girl&#125;表白了`); setTimeout(()=&gt;&#123; if(Math.random() &lt; 0.3)&#123; resolve(true); &#125;else &#123; resolve(false); &#125; &#125;, 500) &#125;)&#125;(async () =&gt; &#123; const girls = [&#x27;女孩2&#x27;,&#x27;女孩3&#x27;,&#x27;女孩4&#x27;,&#x27;女孩5&#x27;,&#x27;女孩6&#x27;]; for(let i = 0; i &lt; girls.length; i++)&#123; const result = await express(girls[i]); if(result)&#123; console.log(`$&#123;girls[i]&#125;同意了，不表白了！`); break; &#125;else &#123; console.log(`$&#123;girls[i]&#125;没有同意`); &#125; &#125;&#125;)() 情况一如果await的表达式不是Promise，则会将其使用Promise，resolve包装后按照规则运行。 举个例子： 1234567(async function test() &#123; const result = await 1; console.log(result)&#125;)()console.log(123) 为什么会这样输出呢？ 实际上，进行了特殊处理 12345678910(function test() &#123; return new Promise(resolve =&gt; &#123; Promise.resolve(1).then(data =&gt; &#123; const result = data; console.log(result); resolve(); &#125;) &#125;)&#125;)()console.log(123) 情况二如果对得到的 Promise进行后续处理，await处理的只是返回的正常的Promise状态 但是，如果返回的是错误的呢？ 123456789101112131415async function getPromise() &#123; if(Math.random() &lt; 0.5)&#123; return 1; &#125;else &#123; throw 2; &#125;&#125;async function test() &#123; const result = await getPromise(); console.log(result)&#125;console.log(&#x27;第一次执行&#x27;, test());console.log(&#x27;第二次执行&#x27;, test()); 对此可以使用 try-catch 块 123456789// ... 省略async function test() &#123; try&#123; const result = await getPromise(); console.log(result); &#125;catch (err)&#123; console.log(&#x27;执行错误&#x27;) &#125;&#125;","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://ebig.vip/tags/JavaScript/"},{"name":"Promise","slug":"Promise","permalink":"https://ebig.vip/tags/Promise/"}]},{"title":"flex布局深究","slug":"web/flex","date":"2020-09-01T03:57:34.000Z","updated":"2020-11-17T09:07:33.640Z","comments":true,"path":"web/flex/","link":"","permalink":"https://ebig.vip/web/flex/","excerpt":"flex布局深究，csdn访问","text":"前言对于 基础布局知识，阅读 flex布局教程 - 阮一峰 flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大（瓜分剩余空间）。假设有三个子项 如果设置子项的 flex-grow: 1;， 则它们将按照比例 1 ：1 ：1 等分剩余空间。 如果设置第 一 个子项的flex-grow: 1;，第 二 个子项的flex-grow: 2;，第 三 个子项的flex-grow: 3;，则它们将按照比例 1 ：2 ：3 等分剩余空间。 flex-shrink我们都知道，flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 但是与flex-grow的放大比例有着完全不同的计算方式。 当设置了flex-shrink ，则 flex-grow 属性无效。 我们设置一个容器，包裹三个子项盒子 12345&lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;content&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;content&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;content&quot;&gt;3&lt;/div&gt;&lt;/div&gt; 同时给上样式 123456789101112131415161718192021.wrapper &#123; width: 600px; height: 600px; border: 1px solid black; display: flex;&#125;.content &#123; width: 100px; height: 100px; flex-basis: 300px; /*优先于width*/ flex-shrink: 1; border: 1px solid green; box-sizing: border-box;&#125;.content:nth-of-type(3) &#123; flex-shrink: 3;&#125; 此时，三个子项的大小总共是 900，超过了 盒子600的大小，同时对三个子项设置了 flex-shrink，前两个盒子为1，第三个值为3 我们按照 flex-grow的扩展的计算方式进行测试，可以得到 而实际结果也是如此，但真的是这样么？当然不是！！！，主要原因在于 三个子项的宽度是相等的，然后误导将shrink的比例当做了缩减的比例。 我们再设置一个容器，包裹三个子项盒子 12345&lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;content&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;content&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;content&quot;&gt;3&lt;/div&gt;&lt;/div&gt; 同时给上样式， 去掉子项边框，让其为整数值，方便计算！ 12345678910111213141516171819.wrapper &#123; width: 600px; height: 600px; border: 1px solid black; display: flex;&#125;.content &#123; width: 200px; height: 100px; flex-shrink: 1; &#125;.content:nth-of-type(3) &#123; width: 400px; flex-shrink: 3;&#125; 此时，三个子项的大小总共是 800，超过了 盒子600的大小 200，同时对三个子项设置了 flex-shrink，前两个盒子为1，第三个值为3。 按照刚刚测试的算法，1：1：3 对超出的 200 进行压缩可以得到第一个宽度为 200 - 40 = 160，第一个宽度为 200 - 40 = 160，第三个宽度为 400 -120 = 280 但实际测试结果为175 175 250，如此便可以验证压缩的计算方式，并不是扩展的计算方式 真实的计算方式则是所有子项的 真实（内容区）宽度 shrink值 相加，作为权值，为分母。 然后每个子项的真实宽度 shrink值/ 权值 再乘以多出来的部分，得到 压缩部分。再减去压缩部分得到实际宽度大小。 拿上述例子来计算。 这里就有一个值得注意的地方。在图片中 计算压缩大小的试子中，分子上是 真实宽度为啥呢？ 我们接着设置一个容器，包裹三个子项盒子 12345&lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;content&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;content&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;content&quot;&gt;3&lt;/div&gt;&lt;/div&gt; 同时给上样式， 这次加上子项边框 123456789101112131415161718192021.wrapper &#123; width: 600px; height: 600px; border: 1px solid black; display: flex;&#125;.content &#123; width: 200px; height: 100px; flex-shrink: 1; border: 1px solid black; box-sizing: border-box;&#125;.content:nth-of-type(3) &#123; width: 400px; flex-shrink: 3;&#125; 可以得到实际结果如图 惊奇的发现，宽度竟然变成了小数，而且，加上padding的值也不等于计算出来的结果，虽然差不多。 但是如果将 border 去掉，就会发现和原来的一样，不同的地方，就是padding的值没了。 细心的可以知道：这个真实宽度就是指内容区的真实宽度。 我们再接着设置一个容器，包裹三个子项盒子去掉子项内容区的内容 12345&lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;content&quot;&gt;&lt;/div&gt; &lt;div class=&quot;content&quot;&gt;&lt;/div&gt; &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;&lt;/div&gt; 同时给上样式， 加上颜色这次前两个盒子 不设置width，用padding代替宽度大小，去掉边框 123456789101112131415161718192021222324.wrapper &#123; width: 600px; height: 600px; border: 1px solid black; display: flex;&#125;.content &#123; height: 100px; padding: 0 100px; flex-shrink: 1; box-sizing: border-box; background-color: #f0f;&#125;.content:nth-of-type(2) &#123; background-color: #ff0;&#125;.content:nth-of-type(3) &#123; width: 400px; flex-shrink: 3; background-color: #0ff;&#125; 可以得到实际结果如图 惊奇的发现，它们宽度竟然一样。其实可以猜测，第一个和第二个都没有压缩，只有第三个压缩了。 相当于 第一个和第二个的 shrink值，都是 0 。 其权重 计算可以为 0 * 1 + 0 * 1 + xxx * 3。这样一来，只能在第三个上面压缩。 我们再再接着设置一个容器，包裹三个子项盒子 12345&lt;div class=&quot;wrapper&quot;&gt; &lt;div class=&quot;content&quot;&gt;&lt;/div&gt; &lt;div class=&quot;content&quot;&gt;&lt;/div&gt; &lt;div class=&quot;content&quot;&gt;&lt;/div&gt;&lt;/div&gt; 同时给上样式， 加上颜色这次设置80的padding 12345678910111213141516171819202122232425.wrapper &#123; width: 600px; height: 600px; border: 1px solid black; display: flex;&#125;.content &#123; width: 200px; height: 100px; padding: 0 80px; flex-shrink: 1; box-sizing: border-box; background-color: #f0f;&#125;.content:nth-of-type(2) &#123; background-color: #ff0;&#125;.content:nth-of-type(3) &#123; width: 400px; flex-shrink: 3; background-color: #0ff;&#125; 推测结果如图 真实效果如图 当设置了 flex-shrink属性同时遇到 box-sizing:border-box ， border或者padding，加权值在计算的时候，不是真实盒子宽度，而是内容区的宽度。 flex-basis当子项同时设置了 width和flex-basis，basis的优先级更高。 不做测试，直接结论！ 就是子项的width。权重高于width。 添加内容，当是英语单词的时候， 只写basis ，就代表width的最小值，即min-width 同时设置了basis和 width。 basis &lt; width basis是下限，width代表上限 basis &gt; width 则width无效了 当不换行内容撑开容器，设置了shrink，不参与压缩flex-shrink 可以设置中文 word-break:break-word强制换行","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"flex布局","slug":"flex布局","permalink":"https://ebig.vip/tags/flex%E5%B8%83%E5%B1%80/"}]},{"title":"css中的基线","slug":"web/css-lineheight","date":"2020-07-21T15:21:00.000Z","updated":"2020-10-12T11:17:02.786Z","comments":true,"path":"web/css-lineheight/","link":"","permalink":"https://ebig.vip/web/css-lineheight/","excerpt":"CSS基线","text":"Line-height行距、行间距行距： 相邻文本行间 上一个文本行基线 和 下一个文本行基线 之间的距离。 行间距： 相邻文本行间 上一个文本行下行线 和 下一个文本行上行线 之间的距离。 行距 = 行间距 + 字体大小 在CSS中，CSS属性line-height则是用于设置真实的行距。从W3C Rec中看出，line-height就是行距, 而line-height的字面意思即为“行高”，推导结果CSS中行高即是行距。 了解了行高，行距，行间距。那么接下来介绍line-height的重要属性–垂直居中。 我们知道，行距(leading) = 行间距(line-space) + 字体大小(font-size)。 行间距与字体大小都可以通过相应CSS属性设置，问题是行间距所占的空间是怎么分配的呢？ CSS采用的是将行间距对半开，然后分配到上下两端，这里引用了Half-leading的概念， Half-leading = 行距/2 由于行距可能为负值，可以知道行间距可能为负数，那么垂直居中还有效么？ 答案是肯定的，行间距为负数时，Half-leading 自然也是负数，只是上下两端从增加等量空间变为减少等量空间而已。如下例子： 123&lt;div style=&quot;position:relative;top:100px;font-size:90px;line-height:10px;background:yellow;&quot;&gt; &lt;span style=&quot;border:solid 1px red;line-height:10px;&quot;&gt;x&lt;/span&gt;&lt;/div&gt; line-height属性CSS line-height 属性 | 菜鸟教程 CSS line-height 属性 | W3school 值 描述 可能值 normal | &lt;number&gt; | &lt;lenght&gt; | &lt;percentage&gt; | &lt;inherit&gt; 默认值 normal 继承性 yes normal对于normal，其实就是一个值，但是由浏览器决定，实际值一般在1.0~1.2之间（闭区间） 不同浏览器下，normal 不同；同一浏览器下，font-size 不同，normal 也不同；同一浏览器下，font-size 相同，font-family 不同，normal 也会变化。 normal 的平均值确实是 1.0~1.2(闭区间)，但是具体到特定浏览器、font-family 和 font-size时，normal值可能会大于1.2。 length指定长度用于计算线盒高度，负值非法。 设置固定值，单位可以是 px 、pt 。 好处就是简单，设置是什么，line-height的实际高度就是什么。 坏处是子元素默认 继承 父容器的line-height，若子元素的font-size 大于 父容器的font-size，那么子元素的文本行会什么密集。 解决方案，一般是采用 相对 font-size 实际大小 来设置 line-height 值的方式，如默认 normal 方法。 percentage(%)计算值是百分比乘以元素计算字体大小，负值非法。 值的注意的是，参考系的确是font-size，但子元素继承的是父容器的实际 line-height 值，也就是说父容器设置为 font-size:20px;line-height:200%;，子元素继承的line-height值为 40px，而不是 200% ，因此又回到了 方式 的问题了。 number属性的使用值是 这个数字 乘以 元素的字体大小，负值非法，计算值与指定值相同。 和方式一样，以 font-size 为参考系，以相对值方式设置 line-height。 唯一不同的是，子元素继承的是父容器的值，参考系自动变为子元素的 font-size 123line-height: 1.2em;line-height: 1.2; 上门的两句其实是等价的，若想将参考系 改 为根元素的 font-size ， 需要CSS3的新增line-height:1.2rem;。 深入理解根据WCAG2.0(万维网内容可存取性指南)规定 “段落中的行距至少要1.5倍 ”，那么是否在body设置一下，就一劳永逸了呢？ CSS代码HTML代码12345678910111213body&#123; font-size: 16px; line-height: 1.5;&#125;h1 &#123; font-size:32px;&#125;p &#123; font-size:16px;&#125;#footer &#123; font-size:12px;&#125;123&lt;h1&gt;深入理解 line-height 和 vertical-align&lt;/h1&gt;&lt;p&gt;In my dual profession as an educator and health care provider, I have worked with numerous children infected with the virus that causes AIDS. The relationships that I have had with these special kids have been gifts in my life. They have taught me so many things, but I have especially learned that great courage can be found in the smallest of packages. Let me tell you about Tyler. &lt;/p&gt; &lt;div id=&quot;footer&quot;&gt;bed and whispered, “I might die soon. I’m not scared. When I die, please dress me in red. Mom promised she’s coming to heaven, too. I’ll be playing when she gets there, and I want to make sure she can find me.”&lt;/div&gt; 效果图 代码效果呈现如图，不难发现，对于 h1 标题来说，行距有点多，于是可以有如下配置： 123456body&#123; line-height:1.5;&#125;h1,h2,h3,h4,h5,h6&#123; line-height:1.2;&#125; vertical-align如何对齐属性CSS vertical-align 属性 | W3school CSS vertical-align 属性 | MDN web docs 它的属性规则还是比较多的，但是也不能都记，或者用的时候挨个查。归纳一下不难发现 对齐操作必定涉及操作元素和参考系元素，而vertical-align的值全是指的是参考系元素的位置，操作元素则以baseline或者linebox上中下作对齐； 默认对齐方式为baseline，数量值均是相对于baseline而言。 vertical-align 仅对 inline-level 和 table-cell 元素有效。 默认baseline1234&lt;div style=&quot;font-size:14px;&quot;&gt; &lt;span style=&quot;font-size:40px;&quot;&gt;line-height x vertical-align&lt;/span&gt; x for reference frame&lt;/div&gt; 这里的x for reference frame作为参考系，它的 baseline 就是 line-height x vertical-align 要对齐的。 在此 baseline 的基础上做出如下设置 在span中设置 vertical-align: 10px; 1234&lt;div style=&quot;font-size:14px;&quot;&gt; &lt;span style=&quot;font-size:40px;vertical-align:10px;&quot;&gt;line-height x vertical-align&lt;/span&gt; x for reference frame&lt;/div&gt; 在span中设置 vertical-align: -10px; 1234&lt;div style=&quot;font-size:14px;&quot;&gt; &lt;span style=&quot;font-size:40px;vertical-align:-10px;&quot;&gt;line-height x vertical-align&lt;/span&gt; x for reference frame&lt;/div&gt; 在div中设置line-height:1;， 同时在span中设置 vertical-align:50%; 1234&lt;div style=&quot;font-size:14px;line-height:1;&quot;&gt; &lt;span style=&quot;font-size:40px;vertical-align:50%;&quot;&gt;line-height x vertical-align&lt;/span&gt; x for reference frame&lt;/div&gt; 在div中设置line-height:1;， 同时在span中设置 vertical-align: -50%; 1234&lt;div style=&quot;font-size:14px;line-height:1;&quot;&gt; &lt;span style=&quot;font-size:40px;vertical-align: -50%;&quot;&gt;line-height x vertical-align&lt;/span&gt; x for reference frame&lt;/div&gt; top把元素 line box 上边框对齐父元素的 line box 上边框 text-top把元素的 line box 上边框对齐父元素的 ascent(即 content top edge) middle把元素 line box 中垂点与父元素基线 + x-height/2 的高度对齐 未完待续刚刚换了新的markdown标签，用起来比较费劲，码字效率比较低，还在熟悉中。","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"css","slug":"css","permalink":"https://ebig.vip/tags/css/"}]},{"title":"js的console","slug":"web/js-console","date":"2020-07-20T12:23:00.000Z","updated":"2020-11-17T08:46:05.761Z","comments":true,"path":"web/js-console/","link":"","permalink":"https://ebig.vip/web/js-console/","excerpt":"javascript的 console细致了解。","text":"console第一印象便是console.log，通过它在浏览器控制台进行调试输出。但除此之外还有许多方法。比如在访问百度首页时候的控制台，会有以下的内容。但是仔细一看，你会发现，它有颜色。怎么做到的呢？ 其实不难发现，输入console，可知它是一个对象，里面有着高达14个方法，而我们最常用只有一个log()，可怕。 Console - Web API 接口参考 | MDNhttps://developer.mozilla.org/zh-CN/docs/Web/API/Console JavaScript Console对象 | 菜鸟教程https://www.runoob.com/w3cnote/javascript-console-object.html 通过文档我们清晰的知道各个方法的作用，以及使用方法。 通过占位符，可以改变输出的内容和样式。其中 %c 被称为 CSS占位符。 详解console.log()首先，除了console.log(object)这种语法，还有 console.log(object, otherObject, string) 将所有东西都整齐的打印出来。另外，还有 console.log(msg, value)，通过占位符来输出，执行方式与 C 语言的输出类似。 对于 %c，输出样式。 一个 %c 是将此后所有内容都进行渲染 1console.log(&#x27;I am a %cbutton&#x27;, &#x27;color: white; background-color: orange; padding:2px 5px; border-radius: 2px&#x27;); 两个 %c 则是对其中间内容渲染。 1console.log(&#x27;I am a %cbutton%c not a div&#x27;, &#x27;color: white; background-color:orange; padding: 2px 5px; border-radius: 2px&#x27;,&#x27;color: &quot;auto&quot;&#x27;); 当然渲染的只是样式，没有实质性的功能（按钮，点击事件等） 如果想 %c 展示出来呢? 与 \\ 类似，写两个即可，比如将上述的语句展示出来。 1console.log(&#x27;I am a %cbutton%%c not a div&#x27;, &#x27;color: white; background-color:orange; padding: 2px 5px; border-radius: 2px&#x27;,&#x27;color: &quot;auto&quot;&#x27;); console.dir()通常看，它与 log() 的功能非常类似，但也有略微不同，主要在对文档结构的输出方面。 展开来看，log 只是输出了文档结构的内容，怎么写的怎么输出。清晰展示DOM节点，当我们选中时候，还可以跳转子DOM节点。 而 dir() 却是一种更对象化的输出方式观察元素节点，在监测元素节点方面，这种结果无疑是最好的。 console.warn()它可能是 log() 最直接明显的替换产生的方法，它的级别是warn级别而不是一个info级别，你可以将所有的 console.log() 过滤掉只留下 console.warn()。 在Vue的部分源码中也是使用 console.warn() 来操作的。 123456&#x2F;&#x2F;vue.jstip &#x3D; function (msg, vm) &#123; if (hasConsole &amp;&amp; (!config.silent)) &#123; console.warn(&quot;[Vue tip]: &quot; + msg + (vm ? generateComponentTrace(vm) : &#39;&#39;)); &#125;&#125;; console.table()这个，就是将对象数组展示为列表的数据方法，变得更加简洁可观。例如对一个对象数组使用此方法。 对于 log() 输出结果是一个小箭头的省略形式，展开来看，可以清晰的查看对象。 而 table() 的输出更加简洁，更直观展示。并且值得一提的是，可以通过第一行的右上角箭头可以进行排序。table() 最多只处理1000行的数据能力，不适用所有数据集合。 当然如果只想要某一列展示，可以通过第二个参数进行传递。 1console.table(transactions,[&quot;id&quot;,&quot;price&quot;]) log()输出table()输出 console.assert()它的第一个参数是 falsey 时，与 log() 函数无异。当第一个参数是真值的时候什么都不做。 牢记，它的作用是判断，而不是过滤。 它的使用场景与 循环时候要显示特殊的 数据相似。 123if(obj.num === 3)&#123; console.log(obj)&#125; 假设我们上面的值在时间戳里有一个 null 或者 0，这会破坏代码日期格式。 当和任何有效的事物对象一起使用时会跳过。但是有一个触发了我们的日志记录，因为时间戳在 0 和 null 时为假值。 有时候，想实现更加复杂的场景，举例，对于上述表格中看到了关于用户WAL2025的数据，并想展示来自它们的事务。 1console.assert(transactions.buyer === &#x27;WAL2025&#x27;, transactions); 看起来没毛病，但是并没有用，牢记，场景必须是否定态，它的作用是判断，而不是过滤。 1console.assert(transactions.buyer !== &#x27;WAL2025&#x27;, transactions); 结语剩下的方法，演示过于困难或者简单，还是看文档理解比较好。 Console - Web API 接口参考 | MDNhttps://developer.mozilla.org/zh-CN/docs/Web/API/Console JavaScript Console 对象 | 菜鸟教程https://www.runoob.com/w3cnote/javascript-console-object.html 其他方法的存在，让我们可以得到比 log() 的信息更多一些，并且不需要调试器的情况下，这些工具还是很有用的。 附图简洁直观的理解使用 console","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://ebig.vip/tags/JavaScript/"}]},{"title":"try-catch监听多线程","slug":"web/js-trycatch","date":"2020-06-21T15:21:00.000Z","updated":"2020-10-13T09:05:02.102Z","comments":true,"path":"web/js-trycatch/","link":"","permalink":"https://ebig.vip/web/js-trycatch/","excerpt":"对于try-catch 这组函数，主要了解就是异常处理。 但是它对于多线程的处理机制是什么样呢？ 另外，js不是单线程么？多线程又是怎么回事？","text":"try-catch 函数基本使用当 JavaScript 引擎执行 JavaScript 代码时，可能会发生各种错误，可能是语法错误，通常是程序员造成的编码错误或错别字。可能是拼写错误或语言中缺少的功能（可能由于浏览器差异）。可能是由于来自服务器或用户的错误输出而导致的错误。当然，也可能是由于许多其他不可预知的因素。当错误发生时，当事情出问题时，JavaScript 引擎通常会停止，并生成一个错误消息。这种情况被称为：JavaScript 抛出异常。对于可能出现的问题的代码我们需要预判，这就涉及到异常的测试与捕获。 123456try &#123; //在这里运行代码&#125;catch (err) &#123; //在这里处理错误&#125; try 语句允许我们定义在执行时进行错误测试的代码块。catch 语句允许我们定义当 try 代码块发生错误时，所执行的代码块。JavaScript 语句 try 和 catch 是成对出现的。 有一个运行代码的函数 runCode 123function runCode(code) &#123; return eval(code);&#125; 当我们执行 runCode(‘1+1’) 可以得到 2，这里利用 eval 函数特性，可以执行字符串。eval 并不是我们这篇文章的主要内容。对于 code 是用户输入，当用户输入的内容是一段错误代码，我们的函数，就会报错，进而影响之后的逻辑执行。这是我们需要利用 try-catch 进行捕获。代码改写如下： 123456789function runCode(code) &#123; try &#123; // 接下来执行的 eval(code)可能会出错 return eval(code); &#125; catch (error) &#123; // 上面的部分报错，会对外输出错误信息，并不会终止程序 console.log(&#x27;代码存在错误&#x27;) &#125;&#125; 当我执行 runCode(‘aaaaa’), 会给我们提示信息： 代码存在错误，这样我们的错误就成功捕获，并不影响后面的逻辑执行。 使用 try-catch 的建议try catch 的使用，永远应该放在你的控制范围之内，而不应该防范未知的错误。也就是说你很清楚知道这里是有可能”出错“的，而且你很清楚知道什么前提下会出错，你就是要故意利用报错信息来区分错误，后续的程序会解决所有的出错，让程序继续执行。如果让用户先发现你根本没预料到的错误，而不是你先发现错误，你是失职的。 try-catch 与多线程JS 中的“多线程”浏览器中的 JavaScript 确实是以单线程的方式执行的，也就是说 JavaScript 执行使用一个主线程，但是 JavaScript 提供了异步操作，比如定时器(setTimeout、setInterval)事件、Ajax 请求、Promise, I/O 等。它们将会被放入浏览器的事件任务队列（event loop）中去，等到 JavaScript 运行时执行线程空闲时候，事件队列才会按照先进先出的原则被一一执行。但是对于以上的异步操作过程中，能进行的计时，发送请求，I/O 操作都是其他的线程在做的事情，所以说是“多线程”。 多线程不等于异步异步和多线程并不是一个同等关系,异步是最终目的,多线程只是我们实现异步的一种手段。异步是当一个调用请求发送给被调用者,而调用者不用等待其结果的返回而可以做其它的事情。实现异步可以采用多线程技术或则交给另外的进程来处理。 setTimeout 函数1234567try &#123; setTimeout(function () &#123; console.log(a.b) &#125;, 1000)&#125; catch (error) &#123; console.log(&#x27;有错误&#x27;)&#125; 控制台报错： a is not defined.，并没有被捕获。得出结论， try-catch 无法监听 setTime 函数中的错误。 Promise 函数1234567try &#123; let p = new Promise((resolve, reject) =&gt; &#123; a.b &#125;)&#125;catch (error) &#123; console.log(&#x27;有错误&#x27;)&#125; 控制台报错： a is not defined.，并没有被捕获。得出结论， try-catch 无法监听 Promise 函数中的错误。 Ajax 函数12345678910111213141516171819function ajax(url) &#123; var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : ActiveXObject(&quot;microsoft.XMLHttp&quot;) xhr.open(&quot;get&quot;, url, true); xhr.send(); xhr.onreadystatechange = () =&gt; &#123; if (xhr.readystate == 4) &#123; if (xhr.status == 200) &#123; var data = xhr.responseTEXT; return data; &#125; &#125; &#125;&#125;try &#123; ajax(&#x27;someurl&#x27;)&#125; catch (error) &#123; console.log(&#x27;有错误&#x27;)&#125; Ajax 中的请求出错，并未被捕获。得出结论 try-catch 无法监听 Ajax 函数中的错误。 总结对于以上几种异步操作，我们看的出来 try-catch 并未帮我们监听的到里面的错误。原因是：javaScript 擎对异步方法进行 try/catch 操作只能捕获当次事件循环内的异常，对 call back 执行时抛出的异常将无能为力。但是对于异步操作，只要是代码逻辑没有问题，我们在适当的问题出口把问题暴露出去就可以了，比如 Promise 的 then，Ajax 的状态判断等等。","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://ebig.vip/tags/JavaScript/"}]},{"title":"HTTP相关知识","slug":"web/http","date":"2020-06-02T09:21:00.000Z","updated":"2020-11-17T07:41:37.330Z","comments":true,"path":"web/http/","link":"","permalink":"https://ebig.vip/web/http/","excerpt":"HTTP相关知识","text":"http 与 https http是超文本传输协议，是目前世界上使用最多的协议。 它是用于从www服务器传输超文本到本地浏览器的传输协议。 https是安全的http通道，在http下加入了 SSL层。 https协议需要CA证书，费用高。 另外，使用不同的链接方式，端口也不一样，一般来说，http协议是80端口，https是443端口 https的工作原理 客户使用https url访问，要求web服务器建立ssl链接 web服务器收到后，会将网站的证书（证书中含公钥）返回给客户端 客户端与服务器端开始协商ssl链接的安全等级，也就是加密等级。 协商一致，建立会话秘钥，然后网站加密，web服务器解密，开始通信。 http请求的方式 http1.0 三种请求：get,post head http1.1 新增6种: options,put,patch,delete,trace,connect get:： 请求页面信息，返回实体主体。 head： 类似于get请求，只不过返回的响应中没有具体内容，用户获取报头。 post 向指定资源提交数据进行处理请求，数据包含在请求体中 get与post get用于获取数据，post用于提交数据 get参数在url后，post可以在http body中提交 get在url长度有限制，post数据可以很大 get提交可以在浏览器缓存，post不会被浏览器缓存 get不安全，因为参数暴露在url中 输入URL到页面加载显示完成发生了什么 DNS解析 TCP连接 发送HTTP请求 服务器处理并返回HTTP报文 浏览器解析渲染 连接结束 一个图片url访问后直接下载怎样实现请求的返回头里，用于浏览器解析的重要参数就是OSS的API文档的返回http头，决定用户下载行为的参数。 状态码 400： 请求无效：前端提交数据与后台实体不一致。 401： 需要用户验证。 403： 服务器得到请求，拒绝执行。 304： 未修改 如果客户端发送带条件的get请求且被允许，而文档的内容并没有改变 fetch发送2次请求的原因第一次发送Options请求，询问服务器是否支持修改的请求头，如果支持再发送。 cookie, sessionStorage和localStorage共同点： 都是保存在浏览器端，并且同源 不同点： 比较内容 cookie sessionStorage localStorage 数据 始终在同源的http请求中携带（即使不需要） 仅在本地保存 仅在本地保存 传递性 在浏览器与服务器之间来回传递 不会自动发送数据给服务器 不会自动发送数据给服务器 有效期 在设置的时间内一直有效，即使浏览器或者窗口关闭 仅在当前浏览器窗口关闭前有效 始终有效，窗口或浏览器关闭也一直保存 共享性 所有同源窗口共享 在所有同源窗口中都是共享 跨域问题 URL 说明 是否允许通信 &lt;http://www.a.com/a.jshttp://www.a.com/b.js 同一域名下 允许 http://www.a.com/lab/a.js http://www.a.com/script/b.js 同一域名下不同文件夹 允许 http://www.a.com:8000/a.js http://www.a.com/b.js 同一域名，不同端口 不允许 http://www.a.com/a.js https://www.a.com/b.js 同一域名，不同协议 不允许 http://www.a.com/a.js http://70.32.92.74/b.js 域名和域名对应ip 不允许 http://www.a.com/a.js http://script.a.com/b.js 主域相同，子域不同 不允许 http://www.a.com/a.js http://a.com/b.js 同一域名，不同二级域名（同上） 不允许（cookie这种情况下也不允许访问） http://www.cnblogs.com/a.js http://www.a.com/b.js 不同域名 不允许 如果是协议与端口问题，前台是无能为力的 document.domain + iframe(主域相同) 动态创建script，script标签不受同源策略的限制 location.hash + iframe: 利用location.hash进行传值 window.name + iframe: name值在不同页面加载后依旧存在，最大2M postMessage (html5 中XMLHttpRequest level 2中的API) CORS（IE中是xdr）: 使用自定义的http头 让浏览器与服务器进行沟通 JSNP: 回调函数与数据 ，回调函数是当响应到来时要放在当前页面被调用的函数，数据是传入回调函数中的json数据，也就是回调函数的参数。支持get请求，不知道post。 web sockets： 一种浏览器API，目标是在一个单独的持久连接上提供全双工，双向通信，只有在支持web socket协议的服务器上才能正常工作。 doctype 作用告诉浏览器以何种方式渲染页面，严格模式与混杂模式。 cookie如何防范XSS攻击XSS: 跨站脚本攻击 httponly- 这个属性可以防止，它可以禁止JavaScript脚本访问cookie。 secure- 这个属性告诉浏览器仅在请求为https的时候发送cookie。 一句话概括RESTFUL就是用URL定位资源，用HTTP描述操作。 click在ios上有300ms延迟，原因及如何解决？ 粗暴型，禁用缩放。 使用fastclick，原理是监测到touchend事件后，立即模拟click事件，并且把浏览器30ms后真正的事件给阻断掉。 强缓存、协商缓存什么时候用哪个因为服务器上的资源不是一直固定不变的，大多数情况下它会更新，这个时候如果我们还访问本地缓存，那么对用户来说，那就相当于资源没有更新，用户看到的还是旧的资源；所以我们希望服务器上的资源更新了浏览器就请求新的资源，没有更新就使用本地的缓存，以最大程度的减少因网络请求而产生的资源浪费。 强缓存、协商缓存 强缓存是利用http头中的Expires和Cache-Control两个字段来控制的，用来表示资源的缓存时间。 协商缓存就是由服务器来确定缓存资源是否可用，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问。协商缓存相关字段有Last-Modified/If-Modified-Since，Etag/If-None-Match 参考链接https://segmentfault.com/a/1190000008956069 前端优化 降低请求量： 合并资源，减少http请求数，minify/gzip压缩，webP，lazyLoad 加快请求速度： 预解析DNS， 减少域名数，并行加载，CDN并发 缓存： http协议缓存请求，离线缓存，离线数据缓存 渲染：js/css优化，加载顺序，服务端渲染，pipeline csrf和xss的网络攻击及防范CSRF：跨站请求伪造，可以理解为攻击者盗用了用户的身份，以用户的名义发送了恶意请求 XSS：跨站脚本攻击，是说攻击者通过注入恶意的脚本，在用户浏览网页的时候进行攻击，比如获取cookie 查看网站性能 插入探针或者脚本 搭建环境，模拟用户访问请求，采集数据 第三方工具","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"http协议","slug":"http协议","permalink":"https://ebig.vip/tags/http%E5%8D%8F%E8%AE%AE/"}]},{"title":"Hello My Website","slug":"Hello-My-Website","date":"2020-01-23T08:05:51.000Z","updated":"2020-10-12T10:13:38.781Z","comments":true,"path":"Hello-My-Website/","link":"","permalink":"https://ebig.vip/Hello-My-Website/","excerpt":"欢迎来到我的网站! 这是我的第一个线上网站，稍有雏形！","text":"关于网站这是我的第一个线上网站，历经6天，才像个样子！ 此网站部署在 Github ，我曾经尝试过本地服务器，但内网穿透比较难，知识有限，便放弃了！ 使用Hexo和volantis主题配置。 然后把自己想说的，不想说的，该说的，不该说的，我应该都会在这里写下来。 网站暂未提交到百度检索收录！等真正稳定了，文章有内容干货的时候再提交！ 如果您对网站有任何问题以及见解，欢迎斧正！ 鲸落鲸落是我的QQ昵称，也伴随了我大学生活以及现在。一开始只是觉得该换用了很久很久不知道多久的昵称，后面渐渐了解它的含义。 行吧，就它了！懒得换，就是字数少了点！ 有时回想起某一段时间，还真是五味杂陈。 鲸落 A whale falls，all things are born","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ebig.vip/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ebig.vip/tags/Hexo/"},{"name":"Volantis","slug":"Volantis","permalink":"https://ebig.vip/tags/Volantis/"}]}],"categories":[{"name":"工具技巧","slug":"工具技巧","permalink":"https://ebig.vip/categories/%E5%B7%A5%E5%85%B7%E6%8A%80%E5%B7%A7/"},{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"},{"name":"Hexo","slug":"Hexo","permalink":"https://ebig.vip/categories/Hexo/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://ebig.vip/tags/Git/"},{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://ebig.vip/tags/JavaScript/"},{"name":"Promise","slug":"Promise","permalink":"https://ebig.vip/tags/Promise/"},{"name":"flex布局","slug":"flex布局","permalink":"https://ebig.vip/tags/flex%E5%B8%83%E5%B1%80/"},{"name":"css","slug":"css","permalink":"https://ebig.vip/tags/css/"},{"name":"http协议","slug":"http协议","permalink":"https://ebig.vip/tags/http%E5%8D%8F%E8%AE%AE/"},{"name":"Hexo","slug":"Hexo","permalink":"https://ebig.vip/tags/Hexo/"},{"name":"Volantis","slug":"Volantis","permalink":"https://ebig.vip/tags/Volantis/"}]}