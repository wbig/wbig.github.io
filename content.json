{"meta":{"title":"鲸落","subtitle":"","description":"个人笔记Hexo静态博客,记录学习各种编程笔记和过程,偶尔致敬生活.","author":"鲸落","url":"https://ebig.vip","root":"/"},"pages":[{"title":"","date":"2020-09-29T05:11:06.250Z","updated":"2020-09-29T05:11:06.250Z","comments":true,"path":"404.html","permalink":"https://ebig.vip/404.html","excerpt":"","text":"页面未找到 很抱歉，您访问的页面不存在 请确认不是输入地址有误或该地址已被删除？"},{"title":"","date":"2020-09-15T05:48:01.796Z","updated":"2020-09-15T05:48:01.796Z","comments":true,"path":"MsgBoard/index.html","permalink":"https://ebig.vip/MsgBoard/index.html","excerpt":"","text":"留 言 板"},{"title":"","date":"2020-09-30T04:19:23.080Z","updated":"2020-09-30T04:19:23.080Z","comments":false,"path":"announce/index.html","permalink":"https://ebig.vip/announce/index.html","excerpt":"","text":"公 告 2020-09-30 本站正在不断的努力优化中… 若有报错之处，还请留言告知。 感谢您的支持！ 之前 公告记录缺失！"},{"title":"","date":"2020-10-01T06:17:32.349Z","updated":"2020-10-01T06:17:32.349Z","comments":false,"path":"about/index.html","permalink":"https://ebig.vip/about/index.html","excerpt":"","text":"无论走到哪里都要记得,过去都是假的！ --马尔克斯 鲸落 A whale falls，all things are born"},{"title":"","date":"2020-09-14T04:48:37.202Z","updated":"2020-05-26T13:45:31.000Z","comments":true,"path":"archives/index.html","permalink":"https://ebig.vip/archives/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-09-14T07:42:54.056Z","updated":"2020-09-14T07:42:54.056Z","comments":true,"path":"categories/index.html","permalink":"https://ebig.vip/categories/index.html","excerpt":"","text":""},{"title":"软件工具下载","date":"2020-09-29T04:45:41.115Z","updated":"2020-09-29T04:45:41.115Z","comments":true,"path":"download/index.html","permalink":"https://ebig.vip/download/index.html","excerpt":"","text":"谷歌访问助手2018百试不厌，还能用。 本站下载 Axure RP.v3654Axure RP是一款专业的快速原型设计工具。RP则是Rapid Prototyping（快速原型）的缩写。 官网下载链接 本文件集成了汉化以及授权码。 本站下载 ScreenToGif.v2.19.3电脑端录制制作gif图片! 官网下载链接 由于官网的下载速度过慢，故上传至此。 本站下载 Git.v2.25官网下载链接 由于官网的下载速度过慢，故上传至此。 本站下载 sublime Text.v3211官网下载链接 由于官网的下载速度过慢，故上传至此。 本站下载 xshell 和 xftp官网下载链接 下方链接是 家庭和学校用户的免费许可证版 本站下载"},{"title":"","date":"2020-10-01T06:17:32.584Z","updated":"2020-10-01T06:17:32.584Z","comments":true,"path":"friends/index.html","permalink":"https://ebig.vip/friends/index.html","excerpt":"友 链","text":"友 链 友链添加流程 申请网站需符合以下规则 符合法律法规！ 链接不得无法打开，或者内容质量低下 需要强制 https 协议 添加本站友链，直到不符合申请规则或单方面取消 先添加本站链接 我的信息123456名称：`鲸落`链接: `https://ebig.vip`头像: `https://wbig.gitee.io/cdn/img/avatar.jpg`描述: `无论走到哪里都应该记住，过去都是假的！`标签: `Web前端、小程序、Python、算法`博客截图:`https://wbig.gitee.io/cdn/img/screenshot.png` 评论区按此格式申请友链 请保证链接使用 https 协议 申请友链代码块123456- title: # 名称 avatar: # 头像 url: # 链接 keywords: # 关键词 screenshot: # 截图 description: # 描述（可选） 等待添加贵站 申请符合要求，互加好友成功。 不申请符合要求，友情评论提醒。 感谢支持！还请多多指导。"},{"title":"","date":"2020-09-30T04:16:31.577Z","updated":"2020-09-30T04:16:31.577Z","comments":false,"path":"history/index.html","permalink":"https://ebig.vip/history/index.html","excerpt":"","text":"建 站 史 2020-09-30 修改源文件样式适配超小屏 增加了公告历史页面 2020-09-29 升级主题到4.0.0正式版 迁移Github图床到Gitee 2020-09-15 域名访问加速失败 Gitee部署自定义域名失败！ 重新部署到 Github 首页图标换用 icon 增加评论QQ提醒功能 增加了留言板页面 增加了建站史页面 2020-09-14 部署 Gitee 使用Artitalk增加了说说页面，没事可以自己说两句 增加评论管理以及邮件提醒 全站使用Leancloud进行网站访问统计 2020-09-01 部署 Coding 失败！ 2020-08-20 升级4.0-beta版 2020-03-23 - 2020-08-20 文件记录缺失！ 2020-03-23 删除日历云生成 增加站内导航 增加分类雷达图 2020-03-17 修改volantis主题源文件 2020-03-16 更新同作者最新主题volantis 2020-02-15 舍弃七牛云，使用PicGo配置Github图床 2020-02-09 网站ICP备案成功 2020-02-01 文章专属归类文件夹 2020-01-23 使用Hexo部署成功！ 2020-01-16 建站探索"},{"title":"所有标签","date":"2020-09-14T07:42:41.820Z","updated":"2020-09-14T07:42:41.820Z","comments":true,"path":"tags/index.html","permalink":"https://ebig.vip/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-09-15T08:07:52.277Z","updated":"2020-09-15T08:07:52.277Z","comments":false,"path":"talkMe/index.html","permalink":"https://ebig.vip/talkMe/index.html","excerpt":"","text":"new Artitalk({ appId: 'OgBSRCdOqjkARo5ju1pfDbFl-gzGzoHsz', appKey: 'IpF44vv20a8049RUTVa9rlSs', serverURL: 'https://artitalk.ebig.vip', pageSize: 6, shuoPla: '想说点啥呢~', atEmoji: { weibo-doge: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/weibo/weibo-1.png\", weibo-doge-tuosai: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/weibo/weibo-2.png\", weibo-doge-shengqi: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/weibo/weibo-3.png\", weibo-doge-tushe: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/weibo/weibo-4.png\", aru-1: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-1.gif\", aru-2: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-2.gif\", aru-3: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-3.gif\", aru-4: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-4.gif\", aru-5: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-5.gif\", aru-6: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-6.gif\", aru-7: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-7.gif\", aru-8: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-8.gif\", aru-9: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-9.gif\", aru-10: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-10.gif\", aru-11: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-11.gif\", aru-12: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-12.gif\", aru-13: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-13.gif\", aru-14: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-14.gif\", aru-15: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-15.gif\", aru-16: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-16.gif\", aru-17: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-17.gif\", aru-18: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-18.gif\", aru-19: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-19.gif\", aru-20: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-20.gif\", aru-21: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-21.gif\", aru-22: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-22.gif\", aru-23: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-23.gif\", aru-24: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-24.gif\", aru-25: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-25.gif\", aru-26: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-26.gif\", aru-27: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-27.gif\", aru-28: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-28.gif\", aru-29: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-29.gif\", aru-30: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-30.gif\", aru-31: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-31.gif\", aru-32: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-32.gif\", aru-33: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-33.gif\", aru-34: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-34.gif\", aru-35: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-35.gif\", aru-36: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-36.gif\", aru-37: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-37.gif\", aru-38: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-38.gif\", aru-39: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-39.gif\", aru-40: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-40.gif\", aru-41: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-41.gif\", aru-42: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-42.gif\", aru-43: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-43.gif\", aru-44: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-44.gif\", aru-45: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-45.gif\", aru-46: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-46.gif\", aru-47: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-47.gif\", aru-48: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-48.gif\", aru-49: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-49.gif\", aru-50: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-50.gif\", aru-51: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-51.gif\", aru-52: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-52.gif\", aru-53: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-53.gif\", aru-54: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-54.gif\", aru-55: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-55.gif\", aru-56: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-56.gif\", aru-57: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-57.gif\", aru-58: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-58.gif\", aru-59: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-59.gif\", aru-60: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-60.gif\", aru-61: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-61.gif\", aru-62: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-62.gif\", aru-63: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-63.gif\", aru-64: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-64.gif\", aru-65: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-65.gif\", aru-66: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-66.gif\", aru-67: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-67.gif\", aru-68: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-68.gif\", aru-69: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-69.gif\", aru-70: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-70.gif\", aru-71: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-71.gif\", aru-72: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-72.gif\", aru-73: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-73.gif\", aru-74: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-74.gif\", aru-75: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-75.gif\", aru-76: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-76.gif\", aru-77: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-77.gif\", aru-78: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-78.gif\", aru-79: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-79.gif\", aru-80: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-80.gif\", aru-81: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-81.gif\", aru-82: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-82.gif\", aru-83: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-83.gif\", aru-84: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-84.gif\", aru-85: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-85.gif\", aru-86: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-86.gif\", aru-87: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-87.gif\", aru-88: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-88.gif\", aru-89: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-89.gif\", aru-90: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-90.gif\", aru-91: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-91.gif\", aru-92: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-92.gif\", aru-93: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-93.gif\", aru-94: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-94.gif\", aru-95: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-95.gif\", aru-96: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-96.gif\", aru-97: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-97.gif\", aru-98: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-98.gif\", aru-99: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-99.gif\", aru-100: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-100.gif\", aru-101: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-101.gif\", aru-102: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-102.gif\", aru-103: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-103.gif\", aru-104: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-104.gif\", aru-105: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-105.gif\", aru-106: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-106.gif\", aru-107: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-107.gif\", aru-108: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-108.gif\", aru-109: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-109.gif\", aru-110: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-110.gif\", aru-111: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-111.gif\", aru-112: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-112.gif\", aru-113: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-113.gif\", aru-114: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-114.gif\", aru-115: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-115.gif\", aru-116: \"https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/valine/aru/aru-116.gif\", }, })"}],"posts":[{"title":"css中的基线","slug":"web/css-lineheight","date":"2020-07-21T15:21:00.000Z","updated":"2020-10-01T06:17:32.350Z","comments":true,"path":"web/css-lineheight/","link":"","permalink":"https://ebig.vip/web/css-lineheight/","excerpt":"CSS基线","text":"Line-height行距、行间距行距： 相邻文本行间 上一个文本行基线 和 下一个文本行基线 之间的距离。 行间距： 相邻文本行间 上一个文本行下行线 和 下一个文本行上行线 之间的距离。 行距 = 行间距 + 字体大小 在CSS中，CSS属性line-height则是用于设置真实的行距。从W3C Rec中看出，line-height就是行距, 而line-height的字面意思即为“行高”，推导结果CSS中行高即是行距。 了解了行高，行距，行间距。那么接下来介绍line-height的重要属性–垂直居中。 我们知道，行距(leading) = 行间距(line-space) + 字体大小(font-size)。 行间距与字体大小都可以通过相应CSS属性设置，问题是行间距所占的空间是怎么分配的呢？ 行间距分配 CSS采用的是将行间距对半开，然后分配到上下两端，这里引用了Half-leading的概念， Half-leading = 行距/2 由于行距可能为负值，可以知道行间距可能为负数，那么垂直居中还有效么？ 答案是肯定的，行间距为负数时，Half-leading 自然也是负数，只是上下两端从增加等量空间变为减少等量空间而已。如下例子： 123&lt;div style=&quot;position:relative;top:100px;font-size:90px;line-height:10px;background:yellow;&quot;&gt; &lt;span style=&quot;border:solid 1px red;line-height:10px;&quot;&gt;x&lt;/span&gt;&lt;/div&gt; line-height属性CSS line-height 属性 | 菜鸟教程 CSS line-height 属性 | W3school 值 描述 可能值 normal | &lt;number&gt; | &lt;lenght&gt; | &lt;percentage&gt; | &lt;inherit&gt; 默认值 normal 继承性 yes normal对于normal，其实就是一个值，但是由浏览器决定，实际值一般在1.0~1.2之间（闭区间） 不同浏览器下，normal 不同；同一浏览器下，font-size 不同，normal 也不同；同一浏览器下，font-size 相同，font-family 不同，normal 也会变化。 normal 的平均值确实是 1.0~1.2(闭区间)，但是具体到特定浏览器、font-family 和 font-size时，normal值可能会大于1.2。 length指定长度用于计算线盒高度，负值非法。 设置固定值，单位可以是 px 、pt 。 好处就是简单，设置是什么，line-height的实际高度就是什么。 坏处是子元素默认 继承 父容器的line-height，若子元素的font-size 大于 父容器的font-size，那么子元素的文本行会什么密集。 解决方案，一般是采用 相对 font-size 实际大小 来设置 line-height 值的方式，如默认 normal 方法。 percentage(%)计算值是百分比乘以元素计算字体大小，负值非法。 值的注意的是，参考系的确是font-size，但子元素继承的是父容器的实际 line-height 值，也就是说父容器设置为 font-size:20px;line-height:200%;，子元素继承的line-height值为 40px，而不是 200% ，因此又回到了 方式 的问题了。 number属性的使用值是 这个数字 乘以 元素的字体大小，负值非法，计算值与指定值相同。 和方式一样，以 font-size 为参考系，以相对值方式设置 line-height。 唯一不同的是，子元素继承的是父容器的值，参考系自动变为子元素的 font-size 123line-height: 1.2em;line-height: 1.2; 上门的两句其实是等价的，若想将参考系 改 为根元素的 font-size ， 需要CSS3的新增line-height:1.2rem;。 深入理解根据WCAG2.0(万维网内容可存取性指南)规定 “段落中的行距至少要1.5倍 ”，那么是否在body设置一下，就一劳永逸了呢？ CSS代码HTML代码12345678910111213body&#123; font-size: 16px; line-height: 1.5;&#125;h1 &#123; font-size:32px;&#125;p &#123; font-size:16px;&#125;#footer &#123; font-size:12px;&#125;123&lt;h1&gt;深入理解 line-height 和 vertical-align&lt;/h1&gt;&lt;p&gt;In my dual profession as an educator and health care provider, I have worked with numerous children infected with the virus that causes AIDS. The relationships that I have had with these special kids have been gifts in my life. They have taught me so many things, but I have especially learned that great courage can be found in the smallest of packages. Let me tell you about Tyler. &lt;/p&gt; &lt;div id=&quot;footer&quot;&gt;bed and whispered, “I might die soon. I’m not scared. When I die, please dress me in red. Mom promised she’s coming to heaven, too. I’ll be playing when she gets there, and I want to make sure she can find me.”&lt;/div&gt; 效果图 代码效果呈现如图，不难发现，对于 h1 标题来说，行距有点多，于是可以有如下配置： 123456body&#123; line-height:1.5;&#125;h1,h2,h3,h4,h5,h6&#123; line-height:1.2;&#125; 右边为上图，对比可以发现左图行距确实减少了！ vertical-align如何对齐？属性CSS vertical-align 属性 | W3school CSS vertical-align 属性 | MDN web docs 它的属性规则还是比较多的，但是也不能都记，或者用的时候挨个查。归纳一下不难发现 对齐操作必定涉及操作元素和参考系元素，而vertical-align的值全是指的是参考系元素的位置，操作元素则以baseline或者linebox上中下作对齐； 默认对齐方式为baseline，数量值均是相对于baseline而言。 vertical-align 仅对 inline-level 和 table-cell 元素有效。 默认baseline1234&lt;div style=&quot;font-size:14px;&quot;&gt; &lt;span style=&quot;font-size:40px;&quot;&gt;line-height x vertical-align&lt;/span&gt; x for reference frame&lt;/div&gt; baseline对齐 这里的x for reference frame作为参考系，它的 baseline 就是 line-height x vertical-align 要对齐的。 在此 baseline 的基础上做出如下设置 在span中设置 vertical-align: 10px; 1234&lt;div style=&quot;font-size:14px;&quot;&gt; &lt;span style=&quot;font-size:40px;vertical-align:10px;&quot;&gt;line-height x vertical-align&lt;/span&gt; x for reference frame&lt;/div&gt; vertical-align:10px; 在span中设置 vertical-align: -10px; 1234&lt;div style=&quot;font-size:14px;&quot;&gt; &lt;span style=&quot;font-size:40px;vertical-align:-10px;&quot;&gt;line-height x vertical-align&lt;/span&gt; x for reference frame&lt;/div&gt; vertical-align: -10px; 在div中设置line-height:1;， 同时在span中设置 vertical-align:50%; 1234&lt;div style=&quot;font-size:14px;line-height:1;&quot;&gt; &lt;span style=&quot;font-size:40px;vertical-align:50%;&quot;&gt;line-height x vertical-align&lt;/span&gt; x for reference frame&lt;/div&gt; 在div中设置line-height:1;， 同时在span中设置 vertical-align: -50%; 1234&lt;div style=&quot;font-size:14px;line-height:1;&quot;&gt; &lt;span style=&quot;font-size:40px;vertical-align: -50%;&quot;&gt;line-height x vertical-align&lt;/span&gt; x for reference frame&lt;/div&gt; top把元素 line box 上边框对齐父元素的 line box 上边框 text-top把元素的 line box 上边框对齐父元素的 ascent(即 content top edge) middle把元素 line box 中垂点与父元素基线 + x-height/2 的高度对齐 未完待续刚刚换了新的markdown标签，用起来比较费劲，码字效率比较低，还在熟悉中。","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"css","slug":"css","permalink":"https://ebig.vip/tags/css/"}]},{"title":"js的console","slug":"web/js-console","date":"2020-07-20T12:23:00.000Z","updated":"2020-10-01T06:17:32.350Z","comments":true,"path":"web/js-console/","link":"","permalink":"https://ebig.vip/web/js-console/","excerpt":"javascript的 console细致了解。","text":"console第一印象便是console.log，通过它在浏览器控制台进行调试输出。但除此之外还有许多方法。比如在访问百度首页时候的控制台，会有以下的内容。但是仔细一看，你会发现，它有颜色。怎么做到的呢？ 其实不难发现，输入console，可知它是一个对象，里面有着高达14个方法，而我们最常用只有一个log()，可怕。 Console - Web API 接口参考 | MDN JavaScript Console 对象 | 菜鸟教程 console方法 通过文档我们清晰的知道各个方法的作用，以及使用方法。 通过占位符，可以改变输出的内容和样式。其中 %c 被称为 CSS占位符。 详解console.log()首先，除了console.log(object)这种语法，还有 console.log(object, otherObject, string) 将所有东西都整齐的打印出来。另外，还有 console.log(msg, value)，通过占位符来输出，执行方式与 C 语言的输出类似。 对于 %c，输出样式。 一个 %c 是将此后所有内容都进行渲染 1console.log(&#x27;I am a %cbutton&#x27;, &#x27;color: white; background-color: orange; padding:2px 5px; border-radius: 2px&#x27;); 一个%c 两个 %c 则是对其中间内容渲染。 1console.log(&#x27;I am a %cbutton%c not a div&#x27;, &#x27;color: white; background-color:orange; padding: 2px 5px; border-radius: 2px&#x27;,&#x27;color: &quot;auto&quot;&#x27;); 两个%c 当然渲染的只是样式，没有实质性的功能（按钮，点击事件等） 如果想 %c 展示出来呢? 与 \\ 类似，写两个即可，比如将上述的语句展示出来。 1console.log(&#x27;I am a %cbutton%%c not a div&#x27;, &#x27;color: white; background-color:orange; padding: 2px 5px; border-radius: 2px&#x27;,&#x27;color: &quot;auto&quot;&#x27;); console.dir()通常看，它与 log() 的功能非常类似，但也有略微不同，主要在对文档结构的输出方面。 展开来看，log 只是输出了文档结构的内容，怎么写的怎么输出。清晰展示DOM节点，当我们选中时候，还可以跳转子DOM节点。 而 dir() 却是一种更对象化的输出方式观察元素节点，在监测元素节点方面，这种结果无疑是最好的。 console.warn()它可能是 log() 最直接明显的替换产生的方法，它的级别是warn级别而不是一个info级别，你可以将所有的 console.log() 过滤掉只留下 console.warn()。 在Vue的部分源码中也是使用 console.warn() 来操作的。 123456&#x2F;&#x2F;vue.jstip &#x3D; function (msg, vm) &#123; if (hasConsole &amp;&amp; (!config.silent)) &#123; console.warn(&quot;[Vue tip]: &quot; + msg + (vm ? generateComponentTrace(vm) : &#39;&#39;)); &#125;&#125;; console.table()这个，就是将对象数组展示为列表的数据方法，变得更加简洁可观。例如对一个对象数组使用此方法。 对于 log() 输出结果是一个小箭头的省略形式，展开来看，可以清晰的查看对象。 而 table() 的输出更加简洁，更直观展示。并且值得一提的是，可以通过第一行的右上角箭头可以进行排序。table() 最多只处理1000行的数据能力，不适用所有数据集合。 当然如果只想要某一列展示，可以通过第二个参数进行传递。 1console.table(transactions,[&quot;id&quot;,&quot;price&quot;]) log()输出table()输出 console.assert()它的第一个参数是 falsey 时，与 log() 函数无异。当第一个参数是真值的时候什么都不做。 牢记，它的作用是判断，而不是过滤。 它的使用场景与 循环时候要显示特殊的 数据相似。 123if(obj.num === 3)&#123; console.log(obj)&#125; 假设我们上面的值在时间戳里有一个 null 或者 0，这会破坏代码日期格式。 当和任何有效的事物对象一起使用时会跳过。但是有一个触发了我们的日志记录，因为时间戳在 0 和 null 时为假值。 有时候，想实现更加复杂的场景，举例，对于上述表格中看到了关于用户WAL2025的数据，并想展示来自它们的事务。 1console.assert(transactions.buyer === &#x27;WAL2025&#x27;, transactions); 看起来没毛病，但是并没有用，牢记，场景必须是否定态，它的作用是判断，而不是过滤。 1console.assert(transactions.buyer !== &#x27;WAL2025&#x27;, transactions); 结语剩下的方法，演示过于困难或者简单，还是看文档理解比较好。 Console - Web API 接口参考 | MDN JavaScript Console 对象 | 菜鸟教程 其他方法的存在，让我们可以得到比 log() 的信息更多一些，并且不需要调试器的情况下，这些工具还是很有用的。 附图简洁直观的理解使用 console","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://ebig.vip/tags/JavaScript/"}]},{"title":"try-catch监听多线程","slug":"web/js-trycatch","date":"2020-06-21T15:21:00.000Z","updated":"2020-10-01T06:17:32.350Z","comments":true,"path":"web/js-trycatch/","link":"","permalink":"https://ebig.vip/web/js-trycatch/","excerpt":"对于try-catch 这组函数，主要了解就是异常处理。 但是它对于多线程的处理机制是什么样呢？ 另外，js不是单线程么？多线程又是怎么回事？","text":"try-catch 函数基本使用当 JavaScript 引擎执行 JavaScript 代码时，可能会发生各种错误，可能是语法错误，通常是程序员造成的编码错误或错别字。可能是拼写错误或语言中缺少的功能（可能由于浏览器差异）。可能是由于来自服务器或用户的错误输出而导致的错误。当然，也可能是由于许多其他不可预知的因素。当错误发生时，当事情出问题时，JavaScript 引擎通常会停止，并生成一个错误消息。这种情况被称为：JavaScript 抛出异常。对于可能出现的问题的代码我们需要预判，这就涉及到异常的测试与捕获。 123456try &#123; //在这里运行代码&#125;catch (err) &#123; //在这里处理错误&#125; try 语句允许我们定义在执行时进行错误测试的代码块。catch 语句允许我们定义当 try 代码块发生错误时，所执行的代码块。JavaScript 语句 try 和 catch 是成对出现的。 有一个运行代码的函数 runCode 123function runCode(code) &#123; return eval(code);&#125; 当我们执行 runCode(‘1+1’) 可以得到 2，这里利用 eval 函数特性，可以执行字符串。eval 并不是我们这篇文章的主要内容。对于 code 是用户输入，当用户输入的内容是一段错误代码，我们的函数，就会报错，进而影响之后的逻辑执行。这是我们需要利用 try-catch 进行捕获。代码改写如下： 123456789function runCode(code) &#123; try &#123; // 接下来执行的 eval(code)可能会出错 return eval(code); &#125; catch (error) &#123; // 上面的部分报错，会对外输出错误信息，并不会终止程序 console.log(&#x27;代码存在错误&#x27;) &#125;&#125; 当我执行 runCode(‘aaaaa’), 会给我们提示信息： 代码存在错误，这样我们的错误就成功捕获，并不影响后面的逻辑执行。 使用 try-catch 的建议try catch 的使用，永远应该放在你的控制范围之内，而不应该防范未知的错误。也就是说你很清楚知道这里是有可能”出错“的，而且你很清楚知道什么前提下会出错，你就是要故意利用报错信息来区分错误，后续的程序会解决所有的出错，让程序继续执行。如果让用户先发现你根本没预料到的错误，而不是你先发现错误，你是失职的。 try-catch 与多线程JS 中的“多线程”浏览器中的 JavaScript 确实是以单线程的方式执行的，也就是说 JavaScript 执行使用一个主线程，但是 JavaScript 提供了异步操作，比如定时器(setTimeout、setInterval)事件、Ajax 请求、Promise, I/O 等。它们将会被放入浏览器的事件任务队列（event loop）中去，等到 JavaScript 运行时执行线程空闲时候，事件队列才会按照先进先出的原则被一一执行。但是对于以上的异步操作过程中，能进行的计时，发送请求，I/O 操作都是其他的线程在做的事情，所以说是“多线程”。 多线程不等于异步异步和多线程并不是一个同等关系,异步是最终目的,多线程只是我们实现异步的一种手段。异步是当一个调用请求发送给被调用者,而调用者不用等待其结果的返回而可以做其它的事情。实现异步可以采用多线程技术或则交给另外的进程来处理。 setTimeout 函数1234567try &#123; setTimeout(function () &#123; console.log(a.b) &#125;, 1000)&#125; catch (error) &#123; console.log(&#x27;有错误&#x27;)&#125; 控制台报错： a is not defined.，并没有被捕获。得出结论， try-catch 无法监听 setTime 函数中的错误。 Promise 函数1234567try &#123; let p = new Promise((resolve, reject) =&gt; &#123; a.b &#125;)&#125;catch (error) &#123; console.log(&#x27;有错误&#x27;)&#125; 控制台报错： a is not defined.，并没有被捕获。得出结论， try-catch 无法监听 Promise 函数中的错误。 Ajax 函数12345678910111213141516171819function ajax(url) &#123; var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : ActiveXObject(&quot;microsoft.XMLHttp&quot;) xhr.open(&quot;get&quot;, url, true); xhr.send(); xhr.onreadystatechange = () =&gt; &#123; if (xhr.readystate == 4) &#123; if (xhr.status == 200) &#123; var data = xhr.responseTEXT; return data; &#125; &#125; &#125;&#125;try &#123; ajax(&#x27;someurl&#x27;)&#125; catch (error) &#123; console.log(&#x27;有错误&#x27;)&#125; Ajax 中的请求出错，并未被捕获。得出结论 try-catch 无法监听 Ajax 函数中的错误。 总结对于以上几种异步操作，我们看的出来 try-catch 并未帮我们监听的到里面的错误。原因是：javaScript 擎对异步方法进行 try/catch 操作只能捕获当次事件循环内的异常，对 call back 执行时抛出的异常将无能为力。但是对于异步操作，只要是代码逻辑没有问题，我们在适当的问题出口把问题暴露出去就可以了，比如 Promise 的 then，Ajax 的状态判断等等。","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://ebig.vip/tags/JavaScript/"}]},{"title":"CSS相关知识","slug":"web/css","date":"2020-06-02T09:21:00.000Z","updated":"2020-10-01T06:17:32.350Z","comments":true,"path":"web/css/","link":"","permalink":"https://ebig.vip/web/css/","excerpt":"CSS 相关面试知识","text":"CSS层叠样式表 画一条0.5px的线 采用meta viewport border-image的方式 采用transform: scale()的方式 link标签和import标签的区别 link属于html标签，而@import是css提供的 页面被加载时，link会同时被加载，而@import引用的css会等页面加载结束后加载 link权重高于@import transition与animation 大部分属性是相同的，都是随时间改变的元素的属性值 transition需要触发一个事件才能改变属性 flex弹性布局Flex布局教程-阮一峰 BFC块级格式化上下文，用于清楚浮动，防止margin重叠等 会生成BFC的元素： 根元素 float 不为 none的元素 position 为 fixed 和 absolute 的元素 display 为 inline-block 、table-cell 、table-caption 、flex 、 inline-flex 的元素 overflow 不为 visible 的元素 垂直居中的方法 margin: auto方式 12345678* &#123; position: absolute; margin:auto; top: 0; left: 0; rigth: 0; bottom: 0;&#125; 四边为 0 ，具体原理可以看 margin: 0 auto为什么会居中？ margin负值 1234567891011121314151617.container&#123; width: 500px; height: 400px; border: 2px solid #379; position: relative;&#125;.inner&#123; width: 480px; height: 380px; background-color: #746; position: absolute; top: 50%; left: 50%; margin-top: -190px; margin-left: -240px;&#125; margin 的 top 和 left 值为宽高的一般3. table-cell 1234div &#123; display:table-cell; vertical-align:middle;&#125; 设置到父元素，这样子元素可以实现垂直居中。4. 利用flex 12345div &#123; display: flex; align-items: center; justify-content: center;&#125; 设置到父元素，这样子元素可以实现垂直居中。5. 利用calc函数 12345678div &#123; width: 100px; height: 100px; position: absolute; top: calc(50% - 50px); left: calc(50% - 50px);&#125; clac函数是 CSS3 新增，用于计算6. 利用translate函数 123456789div &#123; width: 100px; height: 100px; position: absolute; top: calc(50%); left: calc(50%); transform: translate(-50%, -50%);&#125; 关于js动画和css3动画的差异性渲染线程分为 Main thread 和 Compositor thread。 如果 CSS3 动画只改变 transform 和 opacity，这时整个 CSS3 动画得以在 Compositor trhead 完成（而js动画则会在 Main thread 执行，然后出发 Compositor thread 进行下一步操作） 特别注意的是如果改变 transform 和 opacity 是不会 layout 或者 paint 的。","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"css","slug":"css","permalink":"https://ebig.vip/tags/css/"}]},{"title":"HTTP相关知识","slug":"web/http","date":"2020-06-02T09:21:00.000Z","updated":"2020-10-01T06:17:32.350Z","comments":true,"path":"web/http/","link":"","permalink":"https://ebig.vip/web/http/","excerpt":"HTTP相关知识","text":"http 与 https http是超文本传输协议，是目前世界上使用最多的协议。 它是用于从www服务器传输超文本到本地浏览器的传输协议。 https是安全的http通道，在http下加入了 SSL层。 https协议需要CA证书，费用高。 另外，使用不同的链接方式，端口也不一样，一般来说，http协议是80端口，https是443端口 https的工作原理 客户使用https url访问，要求web服务器建立ssl链接 web服务器收到后，会将网站的证书（证书中含公钥）返回给客户端 客户端与服务器端开始协商ssl链接的安全等级，也就是加密等级。 协商一致，建立会话秘钥，然后网站加密，web服务器解密，开始通信。 http请求的方式 http1.0 三种请求：get,post head http1.1 新增6种: options,put,patch,delete,trace,connect get:： 请求页面信息，返回实体主体。 head： 类似于get请求，只不过返回的响应中没有具体内容，用户获取报头。 post 向指定资源提交数据进行处理请求，数据包含在请求体中 get与post get用于获取数据，post用于提交数据 get参数在url后，post可以在http body中提交 get在url长度有限制，post数据可以很大 get提交可以在浏览器缓存，post不会被浏览器缓存 get不安全，因为参数暴露在url中 输入URL到页面加载显示完成发生了什么? DNS解析 TCP连接 发送HTTP请求 服务器处理并返回HTTP报文 浏览器解析渲染 连接结束 一个图片url访问后直接下载怎样实现？请求的返回头里，用于浏览器解析的重要参数就是OSS的API文档的返回http头，决定用户下载行为的参数。 状态码 400： 请求无效：前端提交数据与后台实体不一致。 401： 需要用户验证。 403： 服务器得到请求，拒绝执行。 304： 未修改 如果客户端发送带条件的get请求且被允许，而文档的内容并没有改变 fetch发送2次请求的原因第一次发送Options请求，询问服务器是否支持修改的请求头，如果支持再发送。 cookie, sessionStorage和localStorage共同点： 都是保存在浏览器端，并且同源 不同点： 比较内容 cookie sessionStorage localStorage 数据 始终在同源的http请求中携带（即使不需要） 仅在本地保存 仅在本地保存 传递性 在浏览器与服务器之间来回传递 不会自动发送数据给服务器 不会自动发送数据给服务器 有效期 在设置的时间内一直有效，即使浏览器或者窗口关闭 仅在当前浏览器窗口关闭前有效 始终有效，窗口或浏览器关闭也一直保存 共享性 所有同源窗口共享 在所有同源窗口中都是共享 跨域问题 URL 说明 是否允许通信 &lt;http://www.a.com/a.jshttp://www.a.com/b.js 同一域名下 允许 http://www.a.com/lab/a.js http://www.a.com/script/b.js 同一域名下不同文件夹 允许 http://www.a.com:8000/a.js http://www.a.com/b.js 同一域名，不同端口 不允许 http://www.a.com/a.js https://www.a.com/b.js 同一域名，不同协议 不允许 http://www.a.com/a.js http://70.32.92.74/b.js 域名和域名对应ip 不允许 http://www.a.com/a.js http://script.a.com/b.js 主域相同，子域不同 不允许 http://www.a.com/a.js http://a.com/b.js 同一域名，不同二级域名（同上） 不允许（cookie这种情况下也不允许访问） http://www.cnblogs.com/a.js http://www.a.com/b.js 不同域名 不允许 如果是协议与端口问题，前台是无能为力的 document.domain + iframe(主域相同) 动态创建script，script标签不受同源策略的限制 location.hash + iframe: 利用location.hash进行传值 window.name + iframe: name值在不同页面加载后依旧存在，最大2M postMessage (html5 中XMLHttpRequest level 2中的API) CORS（IE中是xdr）: 使用自定义的http头 让浏览器与服务器进行沟通 JSNP: 回调函数与数据 ，回调函数是当响应到来时要放在当前页面被调用的函数，数据是传入回调函数中的json数据，也就是回调函数的参数。支持get请求，不知道post。 web sockets： 一种浏览器API，目标是在一个单独的持久连接上提供全双工，双向通信，只有在支持web socket协议的服务器上才能正常工作。 doctype 作用告诉浏览器以何种方式渲染页面，严格模式与混杂模式。 cookie如何防范XSS攻击XSS: 跨站脚本攻击 httponly- 这个属性可以防止，它可以禁止JavaScript脚本访问cookie。 secure- 这个属性告诉浏览器仅在请求为https的时候发送cookie。 一句话概括RESTFUL就是用URL定位资源，用HTTP描述操作。 click在ios上有300ms延迟，原因及如何解决？ 粗暴型，禁用缩放。 使用fastclick，原理是监测到touchend事件后，立即模拟click事件，并且把浏览器30ms后真正的事件给阻断掉。 强缓存、协商缓存什么时候用哪个因为服务器上的资源不是一直固定不变的，大多数情况下它会更新，这个时候如果我们还访问本地缓存，那么对用户来说，那就相当于资源没有更新，用户看到的还是旧的资源；所以我们希望服务器上的资源更新了浏览器就请求新的资源，没有更新就使用本地的缓存，以最大程度的减少因网络请求而产生的资源浪费。 强缓存是利用http头中的Expires和Cache-Control两个字段来控制的，用来表示资源的缓存时间。 协商缓存就是由服务器来确定缓存资源是否可用，所以客户端与服务器端要通过某种标识来进行通信，从而让服务器判断请求资源是否可以缓存访问。协商缓存相关字段有Last-Modified/If-Modified-Since，Etag/If-None-Match 前端优化 降低请求量： 合并资源，减少http请求数，minify/gzip压缩，webP，lazyLoad 加快请求速度： 预解析DNS， 减少域名数，并行加载，CDN并发 缓存： http协议缓存请求，离线缓存，离线数据缓存 渲染：js/css优化，加载顺序，服务端渲染，pipeline 浏览器在生成页面的时候，会生成那两颗树DOM树，CSSOM规则树 csrf和xss的网络攻击及防范CSRF：跨站请求伪造，可以理解为攻击者盗用了用户的身份，以用户的名义发送了恶意请求 XSS：跨站脚本攻击，是说攻击者通过注入恶意的脚本，在用户浏览网页的时候进行攻击，比如获取cookie 查看网站性能 插入探针或者脚本 搭建环境，模拟用户访问请求，采集数据 第三方工具","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"http协议","slug":"http协议","permalink":"https://ebig.vip/tags/http%E5%8D%8F%E8%AE%AE/"}]},{"title":"js 闭包","slug":"web/js-closure","date":"2020-03-21T15:29:19.000Z","updated":"2020-09-29T05:01:35.028Z","comments":true,"path":"web/js-closure/","link":"","permalink":"https://ebig.vip/web/js-closure/","excerpt":"js 闭包， 立即执行函数","text":"闭包1234567891011function a()&#123; function b() &#123; var bbb = 234; console.log(aaa); &#125; var aaa = 123; return b; // 关键&#125;var glob = 100;var demo = a();demo(); a()执行，产生自己的上下文，同时定义b 。 a() 执行完毕后，因为return b 导致，b没有将a 产生的AO的线砍掉。 当执行b()时，即demo()，寻找aaa变量，在a的AO中找到。于是打印出 123 以上过程叫做闭包。但凡是内部的函数，保存到了外部，一定产生闭包。 123456789101112function a() &#123; var num = 100; function b() &#123; num++; console.log(num); &#125; return b;&#125;var demo = a();demo(); //101demo(); //102 闭包作用 实现公有变量 函数累加器 可以做缓存（存储结构） eater123456789101112131415161718function eater()&#123; var food = &quot;&quot;; var obj = &#123; eat: function()&#123; console.log(&quot;i am eating&quot; + food); food = &quot;&quot;; &#125;, push: function(myFood)&#123; food = myFood &#125; &#125; return obj;&#125;var eater1 = eater();eater1.push(&#x27;banana&#x27;);eater1.eat(); eater() 中的food相当于隐式的存储结构，缓存的应用。 可以实现封装，属性私有化 Person(); 模块化开发，防止污染全局变量 闭包后果当内部函数被保存到外部时，将会产生闭包。闭包会导致原有作用域链不释放，造成内存泄露。 内存泄露：指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。 立即执行函数此类函数没有声明，执行完就被销毁（释放），适合做初始化工作。 只有表达式才能被执行符号()执行 能被执行符号()执行的表达式，函数的名字就会被自动忽略 能被执行符号()执行的表达式，也就成为了立即执行函数","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://ebig.vip/tags/JavaScript/"}]},{"title":"js预编译","slug":"web/js-function","date":"2020-03-20T15:21:00.000Z","updated":"2020-09-29T04:54:23.632Z","comments":true,"path":"web/js-function/","link":"","permalink":"https://ebig.vip/web/js-function/","excerpt":"js 预编译，作用域","text":"函数1234567var test = function abc() &#123; ...&#125;// test 是正常的， abc is undefined 我们用的一般都是匿名表达式。 参数12345function sum(a)&#123; ...&#125;sum(11, 2, 3) 当我们实参比形参多的时候， 实参都有地方放。 其实，在每一个函数中 都有一个 arguments arguments 是一个类似数组的东西，放着，[11, 2, 3] 叫做实参列表 123console.log(arguments)&#x2F;&#x2F; --&gt; [11, 2, 3] 映射规则，arguments 与形参列表的变量值一样 形参变化，arguments 一致变化。相反成立 123456function sum(a, b)&#123; a = 2 // 则 arguments[0] 也变为2 arguments[0] = 2 // 则 a 也变为2&#125;sum(1, 2) 但是，实参列表有几个，arguments中就有几个，不随多余的形参变化。 123456function sum(a, b)&#123; //即使 b =2 // arguments[1] 是undefined。不变化&#125;sum(1) 12345678&quot;use strict&quot;function foo(a)&#123; arguments[0] &#x3D; 1; console.log(a,arguments[0])&#125;foo(2)&#x2F;&#x2F; 输出 2，1 严格模式下，映射无作用。 js 特点单线程，解释性语言。 运行三部曲 语法分析 预编译 解释执行 预编译 imply global 暗示全局变量：即任何变量，如果变量未经声明就赋值，此变量为全局对象所有。 全局对象 是window 12var a &#x3D;123;var a &#x3D;b &#x3D; 123; &#x2F;&#x2F; window.a &#x3D; undefined; window.b &#x3D; 123; 一切声明的全局变量，全是window的属性。 123456var a &#x3D;123;&#x2F;&#x2F;则 &#x2F;&#x2F; window&#123;&#x2F;&#x2F; a : 123;&#x2F;&#x2F; &#125;&#x2F;&#x2F; 第一种情况1234test();function test()&#123; console.log(&#x27;a&#x27;);&#125; 控制台输出 a 第二种情况12console.log(a);var a = 123; 控制台输出 undefined 第三种情况1console.log(a); 控制台输出 报错！！！ 预编译题目12345678var a &#x3D; 123; &#x2F;&#x2F;变量声明 + 变量赋值。console.log(a)&#x2F;&#x2F;但是相当于var a ;console.log(a)a &#x3D; 123;&#x2F;&#x2F;所以输出 undefined 例题： 123456789101112131415161718function fn(a)&#123; console.log(a); var a = 123; console.log(a); function a () &#123;&#125; console.log(a); var b = function () &#123;&#125; console.log(b); function d() &#123;&#125;&#125;fn(1); 预编译发生在函数执行的前一刻 创建AO 对象（Activation Object）执行期上下文 123AO&#123; &#125; 找形参和变量声明，将变量和形参名作为AO属性名，值为Undefined 1234AO&#123; a: undefined, b: undefined,&#125; 将实参与形参相统一1234AO&#123; a: 1, b: undefined,&#125; 在函数体中找函数声明，将函数声明的名作为AO对象的属性名挂起来。 12345AO&#123; a: 1, b: undefined, d: &#125; function a(){} 和 function d(){} 是函数声明var b = function(){} 不是 var b 是局部参数声明由于 a已经有了。所以不用。d没有，所以挂上。 在函数体中找函数声明， 值 赋予 函数体。 12345AO&#123; a: function a() &#123;&#125;, b: undefined, d: function d() &#123;&#125;&#125; 于是对于上面的题： 1234567891011121314151617181920212223242526272829function fn(a)&#123; console.log(a); // -&gt; 去AO中拿的 function a()&#123;&#125; var a = 123; // -&gt; a 开始赋值， AO对象中的a被赋值。 // AO&#123; // a: 123, // b: undefined, // d: function d() &#123;&#125; // &#125; console.log(a); // -&gt; 123 function a () &#123;&#125; //预编译已经执行，不在看了。 console.log(a); // -&gt; 123 var b = function() &#123;&#125; // b 被赋值，function()&#123;&#125; // AO&#123; // a: 123, // b: function()&#123;&#125;, // d: function d() &#123;&#125; // &#125; console.log(b); // -&gt; function()&#123;&#125; function d() &#123;&#125;&#125;fn(1); 例题2： 1234567891011121314151617181920212223242526function test(a,b)&#123; console.log(a); // function()&#123;&#125; console.log(b); // undefined var b = 234; console.log(b); // 234 a = 123; console.log(a); // 123 function a()&#123;&#125; var a; b = 234; var b = function () &#123;&#125; console.log(a); // 123 console.log(b); // function () &#123;&#125;&#125; 例题3： 123456789101112131415161718console.log(a); // function a(a)&#123; ... &#125;function a(a)&#123; console.log(a); // function() &#123;&#125; var a = 234; console.log(a); // 234 function a()&#123;&#125;&#125;a(1);var a = 123; 预编译总结 函数声明整体提升 无论你的函数写到哪里，系统总会将你的函数逻辑提升到最前面。所以不管在哪调用，都是在声明下面调用 变量 声明提升 预编译不只发生在函数体，还有全局 全局生成一个 GO 对象 (Global Object) 第四步，在函数体中找函数声明， 值 赋予 函数体。 GO === window AO 上有的 不去GO 123console.log(a) // function a()&#123;&#125;var a =123function a()&#123;&#125; 123var a &#x3D;123console.log(a) &#x2F;&#x2F; 123function a()&#123;&#125; 作用域运行期上下文： 当函数执行时，会创建一个称为执行期上下文的内部对象。一个执行期上下文定义了一个函数执行时的环境，函数每次执行时对应的执行上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行上下文，当函数执行完毕，它所产生的执行上下文被销毁。 比如 1234function test()&#123;&#125;test(); &#x2F;&#x2F; 1 test(); &#x2F;&#x2F; 2 对于 1 对应的test执行会创建一个AO, 执行完毕销毁。对于 2 对应的test执行会创建另个AO，执行完毕销毁。 [[scope]]： 每个JavaScript函数都是一个对象，对象中有些属性我们可以访问，但有些不可以，这些属性仅供JavaScript引擎存取，[[scope]]就是其中一个。[[scpoe]]指的是我们所说的作用域，其中存储了运行期上下文的集合。 作用域链： [[scope]]中所存储的执行期上下文对象集合，这个集合呈链式链接，我们把这种链式链接叫做作用域链。 12345678910function a()&#123; function b()&#123; var b = 234; &#125; var a = 123; b();&#125;var glob = 100;a(); a() 从定义就产生自己的属性和方法，同时有 a.[[scope]]，此时[[scope]]只有一位，指向 GO a() 执行的时候，产生执行期上下文，AO。且AO放在作用域链的顶端。（故a执行首先去AO中找） 故函数查找变量时， 从该函数的作用域链的顶端依次向下查找。 a() 执行时，产生了 b() 函数的定义。 b() 被定义时，它产生的环境就是a() 所产生的。 b() 执行时，也会生成自己的执行期上下文，所以，b在执行时，产生自己AO 放在作用域链的最顶端 当b执行完后，b的AO被销毁。b回到被定义时的状态，等待下一次被调用。 同时发现，a也执行完毕，a的AO也被销毁，但a 中 有b函数定义， b直接被干掉。 a的AO也被销毁，回到定义的状态，等待下一次被调用。直到，a被干掉。 12345678910function a() &#123; function b() &#123; function c() &#123; &#125; c(); &#125; b();&#125;a();","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://ebig.vip/tags/JavaScript/"}]},{"title":"js类型转换","slug":"web/js-typeof","date":"2020-03-18T15:21:00.000Z","updated":"2020-09-29T05:01:50.904Z","comments":true,"path":"web/js-typeof/","link":"","permalink":"https://ebig.vip/web/js-typeof/","excerpt":"js 类型转换 typeof 应用","text":"javascript值类型原始值： 存到 栈 Number String Boolean undefined null 引用值： 存到 堆 array Object function ... ... data RegExp 运算符 数 结果 类型 1/0 Infinity Number -1/0 -Infinity Number 0/0 NaN Not a Number Infinity == Infinity true Boolean NaN == NaN false Boolean 1 &amp;&amp; 2 2 1 &amp;&amp; 0 0 1 &amp;&amp; false &amp;&amp; 1 false 1 &amp;&amp; 1 &amp;&amp; false false 1 &amp; 3 1 Number 1 || 3 1 Number 0 || 3 3 Number 1 &amp;&amp; 2 转化为布尔值 先看第一个表达式转换成布尔值的结果； 如果为真，那么会看第二个表达式转换布尔值的结果； 如果只有两个表达式的话，就看第二个表达式，返回该值。 undefined, null, NaN, “”, 0, false 转化布尔值 都为 false; typeof 类型转换 number string boolean object undefined function 隐式类型转换isNaN()1234console.log(isNaN(&#39;abc&#39;))&#x2F;&#x2F;输出true 其实，函数内部 会进行显式类型转换 1Number(&#39;abc&#39;) --&gt; NaN --&gt; isNaN(NaN) --&gt; true Number(null) –&gt; 0 Number(undefined) –&gt; NaN ++ / –123var a = &quot;123&quot;a++; //Number(a)console.log(a) //--&gt; 124 + / - (一元正负)1234var a &#x3D; +&quot;abc&quot;;console.log(a + &quot;:&quot; + typeof(a));&#x2F;&#x2F;输出 NaN: number +当加号两侧有一个是字符串，他就会调用String 进行转换 1234var a &#x3D; &#39;a&#39; + 1;console.log(a + &quot;:&quot; + typeof(a));&#x2F;&#x2F;输出 a1:string -*/%通过number()显式转换 &amp;&amp; || ！&lt; / &gt; / &lt;= / &gt;=12345var a &#x3D; &#39;a&#39; &gt; 1;&#x2F;&#x2F; 先经过 Number(&#39;a&#39;) --&gt; NaN console.log(a + &quot;:&quot; + typeof(a));&#x2F;&#x2F;输出 false:boolean 1234567891011121314151617181920212223242526272829303132100 &gt; 10 &gt; 0 --&gt; true10 &gt; 100 &gt; 0 --&gt; falseundefined &gt; 0 --&gt; falseundefined &lt; 0 --&gt; falseundefined &#x3D;&#x3D; 0 --&gt; false+ undefined --&gt; NaN0 &#x3D;&#x3D; false --&gt; true0 &#x3D;&#x3D; &quot;&quot; --&gt; true0 &#x3D;&#x3D; null --&gt; false &#x2F;&#x2F;null undefined 在判断类型的时候是不会进行类型转换的。0 &#x3D;&#x3D; undefined --&gt; falsenull &#x3D;&#x3D; false --&gt; false+0 &#x3D;&#x3D;&#x3D; -0 --&gt; true[] &#x3D;&#x3D; [] --&gt; false[] &#x3D;&#x3D; &quot;&quot; --&gt; true&#x2F;&#x2F;与undefined相似的是 null undefined &#x3D;&#x3D; null --&gt; trueNaN &#x3D;&#x3D; NaN --&gt; falseNaN !&#x3D; NaN --&gt; true === / !==不发生类型转换的比较 未定义变量未定义的变量 不能直接使用。但是 123456789//a 未定义typeof(a) --&gt; undefinedtypeof(undefined) --&gt; &quot;undefined&quot; //故： typeof(typeof(a)) --&gt; string typeof返回值都是字符串。 练习12345678910111213141516171819202122232425262728293031323334353637typeof(a) --&gt; &quot;undefined&quot;typeof(undefined) --&gt; &quot;undefined&quot;typeof(NaN) --&gt; &quot;number&quot;typeof(null) --&gt; &quot;object&quot;var a = &quot;123abc&quot;typeof(+a) --&gt; &quot;number&quot;typeof(!!a) --&gt; &quot;boolean&quot;typeof(a+&quot;&quot;) --&gt; &quot;string&quot;1 == &quot;1&quot; --&gt; trueNaN ==NaN --&gt; falseNaN == undefined --&gt; false&quot;11&quot; + 11 --&gt; &quot;1111&quot;1 === &quot;1&quot; --&gt; falseparseInt(&quot;123abc&quot;) --&gt; 123var num = 123123.456789num.toFixed(3) --&gt; &quot;123123.457&quot;console.log(1 + + + + + &quot;1&quot;) --&gt; 2 //只要两个加号中间没有内容，后面的内容就表示类型转换1. !!&quot; &quot; + !!&quot;&quot; - !!false || document.write(&#x27;abc&#x27;)2. true + false - false || document.write(&#x27;abc&#x27;)3. 1 || document.write(&#x27;abc&#x27;)// 所以不可能打印，返回的 1","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://ebig.vip/tags/JavaScript/"}]},{"title":"云开发笔记（四）","slug":"wx-mini/wx-mini-cloud-note4","date":"2020-03-18T08:29:00.000Z","updated":"2020-09-29T04:59:19.721Z","comments":true,"path":"wx-mini/wx-mini-cloud-note4/","link":"","permalink":"https://ebig.vip/wx-mini/wx-mini-cloud-note4/","excerpt":"云开发笔记（四）","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879send: function(event)&#123; /** * 判断 content 内容 不能为空，才能提交 */ if(content.trim() === &#x27;&#x27;)&#123; wx.showModal(&#123; content: &#x27;内容不能为空&#x27;, &#125;) return &#125; // 2. 数据 -&gt; 云数据库 // 数据： 内容， 图片FileID， openid， 昵称， 头像， 时间 // 1. 图片 -&gt; 云存储 -&gt; fileID wx.showLoading(&#123; title: &#x27;正在发布&#x27;, &#125;) let promiseArr = [] //获取 fileID 数组 let fileIds =[] //云存储API只支持 单文件上传 for(let i = 0; i &lt; this.data.images.length; i++)&#123; let pms = new Promise((resolve, reject) =&gt; &#123; let item = this.data.images[i] //正则表达式： 获取文件的 后缀名 let suffix = /\\.\\w+$/.exec(item)[0] // console.log(suffix) wx.cloud.uploadFile(&#123; cloudPath: &#x27;cloud-music/blog/&#x27; + Date.now() + &#x27;-&#x27; + parseInt(Math.random() * 10000000) + suffix, filePath: item, success: (res) =&gt; &#123; console.log(res) fileIds = fileIds.concat(res.fileID) resolve() &#125;, fail: (err) =&gt; &#123; console.err(err) reject() &#125; &#125;) &#125;) promiseArr.push(pms) &#125; /** * 存到数据库 * 我们需要等到，所有图片上传到云存储成功后，才能执行提交数据库 * 定义 Promise 数组，保存 promise对象。 * 循环， 加入数组中， * 最后一起提交到数据库 */ Promise.all(promiseArr).then( (res) =&gt; &#123; db.collection(&#x27;cloudMusic-blog&#x27;).add(&#123; data: &#123; ...userInfo, img: fileIds, content, createTime: db.serverDate() &#125; &#125;).then( (res) =&gt; &#123; wx.hideLoading() wx.showToast(&#123; title: &#x27;发布成功&#x27;, &#125;) // 返回页面，并刷新 wx.navigateBack() &#125;) &#125;).catch((err) =&gt; &#123; wx.hideLoading() wx.showToast(&#123; title: &#x27;发布失败&#x27;, &#125;) &#125;) &#125; 字界面调用父界面的函数1234567891011//得到 当前存在的界面的数组， 当前界面 下标 为 最后一个// 比如 数组为3 则当前页面的下标 为 3-1 = 2const pages = getCurrentPages()// 取到上一个界面const prevPage = pages[pages.length - 2]prevPage.方法()//就可以了 实现云函数模糊搜索 搜索框中数据 传到 后台 传到云数据库查询 使用 关键字字段 云数据库 给出了正则表达式的 使用方法 1234567891011121314/** * content : 查询字段 * w : 查询对象，放查询条件 */let w = &#123;&#125;if(keywords.trim() != &#x27;&#x27;)&#123; w = &#123; content: db.RegExp(&#123; regexp: keywords, options: &#x27;i&#x27; &#125;) &#125;&#125; 1db.collection(&#x27;cloudMusic-blog&#x27;).where(w).get().then((res) =&gt; &#123;&#125; 权限管理 小程序端查询数据，最多获取20条数据，云函数查询最多100条数据","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"云存储","slug":"云存储","permalink":"https://ebig.vip/tags/%E4%BA%91%E5%AD%98%E5%82%A8/"},{"name":"云数据库","slug":"云数据库","permalink":"https://ebig.vip/tags/%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"JS 异步操作","slug":"wx-mini/wx-mini-cloud-js-promise","date":"2020-03-12T14:36:54.000Z","updated":"2020-10-01T06:17:32.349Z","comments":true,"path":"wx-mini/wx-mini-cloud-js-promise/","link":"","permalink":"https://ebig.vip/wx-mini/wx-mini-cloud-js-promise/","excerpt":"解决 JS 异步操作","text":"JS 异步操作js是单线程的，当主线程输出 2 之后，空闲再执行输出 1 12345setTimeout(() &#x3D;&gt; &#123; console.log(1)&#125;,1000)console.log(2) 我们假设 如下代码，层层回调。 1234567891011&#x2F;&#x2F; callback hell 回调深渊setTimeout(() &#x3D;&gt; &#123; console.log(1) setTimeout(() &#x3D;&gt; &#123; console.log(2) setTimeout(() &#x3D;&gt; &#123; console.log(3) &#125;) &#125;,2000)&#125;,1000) Es6 解决办法。状态不可逆！！！！状态也不可相互转换！！！ 1234&#x2F;&#x2F; promise 1. pending 既不成功也不失败2. fulfilled 成功3. rejected 失败 上面的回调语句用Promise 实现异步如下： 避免了层层回调的循环。将第一个事件的成功状态作为第二个事件的条件。 resolve( … ) … 为成功的返回值,可以为字符串 123456789101112new Promise((resolve, reject) &#x3D;&gt; &#123; setTimeout(() &#x3D;&gt; &#123; console.log(1) resolve() &#125;,1000)&#125;).then(res &#x3D;&gt; &#123; setTimeout(() &#x3D;&gt; &#123; console.log(2) &#125;,2000)&#125;).catch(err &#x3D;&gt; &#123; &#125;) Promise.all() 方法 12345678let p1 &#x3D; new Promise(...)let p2 &#x3D; new Promise(...)let p3 &#x3D; new Promise(...)Promise.all([p1,p2,p3]).then(res &#x3D;&gt; &#123; console.log(&#39;全部完成&#39;) console.log(res)&#125;).catch(..) 如果是说，p1中 reject() 。则promise.all将整体执行失败，但不影响里面p2 ,p3的进程继续执行 Promise.race() 方法 1234Promise.race([p1,p2,p3]).then(res &#x3D;&gt; &#123; console.log(&#39;完成&#39;) console.log(res)&#125;).catch(..) race 顾名思义，竞赛的意思。 即有一个任务完成就表示完成。主要用于判断请求是否超时。 ES7 解决办法。1&#x2F;&#x2F; async await 注意：在云函数中使用，默认支持，小程序端不支持！ 使用步骤 保存一个runtime.js文件，在要用的js页 引用 import regeneratorRuntime from ‘路径/runtime.js’ 现在的微信开发者工具。好像小程序端也支持了！！！！x2F;** * Copyright (c) 2014-present, Facebook, Inc. * * This source code is licensed under the MIT license found in the * LICENSE file in the root directory of this source tree. *&#x2F;!(function(global) &#123; &#x2F;&#x2F; &quot;use strict&quot;; var Op &#x3D; Object.prototype; var hasOwn &#x3D; Op.hasOwnProperty; var undefined; &#x2F;&#x2F; More compressible than void 0. var $Symbol &#x3D; typeof Symbol &#x3D;&#x3D;&#x3D; &quot;function&quot; ? Symbol : &#123;&#125;; var iteratorSymbol &#x3D; $Symbol.iterator || &quot;@@iterator&quot;; var asyncIteratorSymbol &#x3D; $Symbol.asyncIterator || &quot;@@asyncIterator&quot;; var toStringTagSymbol &#x3D; $Symbol.toStringTag || &quot;@@toStringTag&quot;; var inModule &#x3D; typeof module &#x3D;&#x3D;&#x3D; &quot;object&quot;; var runtime &#x3D; global.regeneratorRuntime; if (runtime) &#123; if (inModule) &#123; &#x2F;&#x2F; If regeneratorRuntime is defined globally and we&#39;re in a module, &#x2F;&#x2F; make the exports object identical to regeneratorRuntime. module.exports &#x3D; runtime; &#125; &#x2F;&#x2F; Don&#39;t bother evaluating the rest of this file if the runtime was &#x2F;&#x2F; already defined globally. return; &#125; &#x2F;&#x2F; Define the runtime globally (as expected by generated code) as either &#x2F;&#x2F; module.exports (if we&#39;re in a module) or a new, empty object. runtime &#x3D; global.regeneratorRuntime &#x3D; inModule ? module.exports : &#123;&#125;; function wrap(innerFn, outerFn, self, tryLocsList) &#123; &#x2F;&#x2F; If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator. var protoGenerator &#x3D; outerFn &amp;&amp; outerFn.prototype instanceof Generator ? outerFn : Generator; var generator &#x3D; Object.create(protoGenerator.prototype); var context &#x3D; new Context(tryLocsList || []); &#x2F;&#x2F; The ._invoke method unifies the implementations of the .next, &#x2F;&#x2F; .throw, and .return methods. generator._invoke &#x3D; makeInvokeMethod(innerFn, self, context); return generator; &#125; runtime.wrap &#x3D; wrap; &#x2F;&#x2F; Try&#x2F;catch helper to minimize deoptimizations. Returns a completion &#x2F;&#x2F; record like context.tryEntries[i].completion. This interface could &#x2F;&#x2F; have been (and was previously) designed to take a closure to be &#x2F;&#x2F; invoked without arguments, but in all the cases we care about we &#x2F;&#x2F; already have an existing method we want to call, so there&#39;s no need &#x2F;&#x2F; to create a new function object. We can even get away with assuming &#x2F;&#x2F; the method takes exactly one argument, since that happens to be true &#x2F;&#x2F; in every case, so we don&#39;t have to touch the arguments object. The &#x2F;&#x2F; only additional allocation required is the completion record, which &#x2F;&#x2F; has a stable shape and so hopefully should be cheap to allocate. function tryCatch(fn, obj, arg) &#123; try &#123; return &#123; type: &quot;normal&quot;, arg: fn.call(obj, arg) &#125;; &#125; catch (err) &#123; return &#123; type: &quot;throw&quot;, arg: err &#125;; &#125; &#125; var GenStateSuspendedStart &#x3D; &quot;suspendedStart&quot;; var GenStateSuspendedYield &#x3D; &quot;suspendedYield&quot;; var GenStateExecuting &#x3D; &quot;executing&quot;; var GenStateCompleted &#x3D; &quot;completed&quot;; &#x2F;&#x2F; Returning this object from the innerFn has the same effect as &#x2F;&#x2F; breaking out of the dispatch switch statement. var ContinueSentinel &#x3D; &#123;&#125;; &#x2F;&#x2F; Dummy constructor functions that we use as the .constructor and &#x2F;&#x2F; .constructor.prototype properties for functions that return Generator &#x2F;&#x2F; objects. For full spec compliance, you may wish to configure your &#x2F;&#x2F; minifier not to mangle the names of these two functions. function Generator() &#123;&#125; function GeneratorFunction() &#123;&#125; function GeneratorFunctionPrototype() &#123;&#125; &#x2F;&#x2F; This is a polyfill for %IteratorPrototype% for environments that &#x2F;&#x2F; don&#39;t natively support it. var IteratorPrototype &#x3D; &#123;&#125;; IteratorPrototype[iteratorSymbol] &#x3D; function () &#123; return this; &#125;; var getProto &#x3D; Object.getPrototypeOf; var NativeIteratorPrototype &#x3D; getProto &amp;&amp; getProto(getProto(values([]))); if (NativeIteratorPrototype &amp;&amp; NativeIteratorPrototype !&#x3D;&#x3D; Op &amp;&amp; hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) &#123; &#x2F;&#x2F; This environment has a native %IteratorPrototype%; use it instead &#x2F;&#x2F; of the polyfill. IteratorPrototype &#x3D; NativeIteratorPrototype; &#125; var Gp &#x3D; GeneratorFunctionPrototype.prototype &#x3D; Generator.prototype &#x3D; Object.create(IteratorPrototype); GeneratorFunction.prototype &#x3D; Gp.constructor &#x3D; GeneratorFunctionPrototype; GeneratorFunctionPrototype.constructor &#x3D; GeneratorFunction; GeneratorFunctionPrototype[toStringTagSymbol] &#x3D; GeneratorFunction.displayName &#x3D; &quot;GeneratorFunction&quot;; &#x2F;&#x2F; Helper for defining the .next, .throw, and .return methods of the &#x2F;&#x2F; Iterator interface in terms of a single ._invoke method. function defineIteratorMethods(prototype) &#123; [&quot;next&quot;, &quot;throw&quot;, &quot;return&quot;].forEach(function(method) &#123; prototype[method] &#x3D; function(arg) &#123; return this._invoke(method, arg); &#125;; &#125;); &#125; runtime.isGeneratorFunction &#x3D; function(genFun) &#123; var ctor &#x3D; typeof genFun &#x3D;&#x3D;&#x3D; &quot;function&quot; &amp;&amp; genFun.constructor; return ctor ? ctor &#x3D;&#x3D;&#x3D; GeneratorFunction || &#x2F;&#x2F; For the native GeneratorFunction constructor, the best we can &#x2F;&#x2F; do is to check its .name property. (ctor.displayName || ctor.name) &#x3D;&#x3D;&#x3D; &quot;GeneratorFunction&quot; : false; &#125;; runtime.mark &#x3D; function(genFun) &#123; if (Object.setPrototypeOf) &#123; Object.setPrototypeOf(genFun, GeneratorFunctionPrototype); &#125; else &#123; genFun.__proto__ &#x3D; GeneratorFunctionPrototype; if (!(toStringTagSymbol in genFun)) &#123; genFun[toStringTagSymbol] &#x3D; &quot;GeneratorFunction&quot;; &#125; &#125; genFun.prototype &#x3D; Object.create(Gp); return genFun; &#125;; &#x2F;&#x2F; Within the body of any async function, &#96;await x&#96; is transformed to &#x2F;&#x2F; &#96;yield regeneratorRuntime.awrap(x)&#96;, so that the runtime can test &#x2F;&#x2F; &#96;hasOwn.call(value, &quot;__await&quot;)&#96; to determine if the yielded value is &#x2F;&#x2F; meant to be awaited. runtime.awrap &#x3D; function(arg) &#123; return &#123; __await: arg &#125;; &#125;; function AsyncIterator(generator) &#123; function invoke(method, arg, resolve, reject) &#123; var record &#x3D; tryCatch(generator[method], generator, arg); if (record.type &#x3D;&#x3D;&#x3D; &quot;throw&quot;) &#123; reject(record.arg); &#125; else &#123; var result &#x3D; record.arg; var value &#x3D; result.value; if (value &amp;&amp; typeof value &#x3D;&#x3D;&#x3D; &quot;object&quot; &amp;&amp; hasOwn.call(value, &quot;__await&quot;)) &#123; return Promise.resolve(value.__await).then(function(value) &#123; invoke(&quot;next&quot;, value, resolve, reject); &#125;, function(err) &#123; invoke(&quot;throw&quot;, err, resolve, reject); &#125;); &#125; return Promise.resolve(value).then(function(unwrapped) &#123; &#x2F;&#x2F; When a yielded Promise is resolved, its final value becomes &#x2F;&#x2F; the .value of the Promise&lt;&#123;value,done&#125;&gt; result for the &#x2F;&#x2F; current iteration. result.value &#x3D; unwrapped; resolve(result); &#125;, function(error) &#123; &#x2F;&#x2F; If a rejected Promise was yielded, throw the rejection back &#x2F;&#x2F; into the async generator function so it can be handled there. return invoke(&quot;throw&quot;, error, resolve, reject); &#125;); &#125; &#125; var previousPromise; function enqueue(method, arg) &#123; function callInvokeWithMethodAndArg() &#123; return new Promise(function(resolve, reject) &#123; invoke(method, arg, resolve, reject); &#125;); &#125; return previousPromise &#x3D; &#x2F;&#x2F; If enqueue has been called before, then we want to wait until &#x2F;&#x2F; all previous Promises have been resolved before calling invoke, &#x2F;&#x2F; so that results are always delivered in the correct order. If &#x2F;&#x2F; enqueue has not been called before, then it is important to &#x2F;&#x2F; call invoke immediately, without waiting on a callback to fire, &#x2F;&#x2F; so that the async generator function has the opportunity to do &#x2F;&#x2F; any necessary setup in a predictable way. This predictability &#x2F;&#x2F; is why the Promise constructor synchronously invokes its &#x2F;&#x2F; executor callback, and why async functions synchronously &#x2F;&#x2F; execute code before the first await. Since we implement simple &#x2F;&#x2F; async functions in terms of async generators, it is especially &#x2F;&#x2F; important to get this right, even though it requires care. previousPromise ? previousPromise.then( callInvokeWithMethodAndArg, &#x2F;&#x2F; Avoid propagating failures to Promises returned by later &#x2F;&#x2F; invocations of the iterator. callInvokeWithMethodAndArg ) : callInvokeWithMethodAndArg(); &#125; &#x2F;&#x2F; Define the unified helper method that is used to implement .next, &#x2F;&#x2F; .throw, and .return (see defineIteratorMethods). this._invoke &#x3D; enqueue; &#125; defineIteratorMethods(AsyncIterator.prototype); AsyncIterator.prototype[asyncIteratorSymbol] &#x3D; function () &#123; return this; &#125;; runtime.AsyncIterator &#x3D; AsyncIterator; &#x2F;&#x2F; Note that simple async functions are implemented on top of &#x2F;&#x2F; AsyncIterator objects; they just return a Promise for the value of &#x2F;&#x2F; the final result produced by the iterator. runtime.async &#x3D; function(innerFn, outerFn, self, tryLocsList) &#123; var iter &#x3D; new AsyncIterator( wrap(innerFn, outerFn, self, tryLocsList) ); return runtime.isGeneratorFunction(outerFn) ? iter &#x2F;&#x2F; If outerFn is a generator, return the full iterator. : iter.next().then(function(result) &#123; return result.done ? result.value : iter.next(); &#125;); &#125;; function makeInvokeMethod(innerFn, self, context) &#123; var state &#x3D; GenStateSuspendedStart; return function invoke(method, arg) &#123; if (state &#x3D;&#x3D;&#x3D; GenStateExecuting) &#123; throw new Error(&quot;Generator is already running&quot;); &#125; if (state &#x3D;&#x3D;&#x3D; GenStateCompleted) &#123; if (method &#x3D;&#x3D;&#x3D; &quot;throw&quot;) &#123; throw arg; &#125; &#x2F;&#x2F; Be forgiving, per 25.3.3.3.3 of the spec: &#x2F;&#x2F; https:&#x2F;&#x2F;people.mozilla.org&#x2F;~jorendorff&#x2F;es6-draft.html#sec-generatorresume return doneResult(); &#125; context.method &#x3D; method; context.arg &#x3D; arg; while (true) &#123; var delegate &#x3D; context.delegate; if (delegate) &#123; var delegateResult &#x3D; maybeInvokeDelegate(delegate, context); if (delegateResult) &#123; if (delegateResult &#x3D;&#x3D;&#x3D; ContinueSentinel) continue; return delegateResult; &#125; &#125; if (context.method &#x3D;&#x3D;&#x3D; &quot;next&quot;) &#123; &#x2F;&#x2F; Setting context._sent for legacy support of Babel&#39;s &#x2F;&#x2F; function.sent implementation. context.sent &#x3D; context._sent &#x3D; context.arg; &#125; else if (context.method &#x3D;&#x3D;&#x3D; &quot;throw&quot;) &#123; if (state &#x3D;&#x3D;&#x3D; GenStateSuspendedStart) &#123; state &#x3D; GenStateCompleted; throw context.arg; &#125; context.dispatchException(context.arg); &#125; else if (context.method &#x3D;&#x3D;&#x3D; &quot;return&quot;) &#123; context.abrupt(&quot;return&quot;, context.arg); &#125; state &#x3D; GenStateExecuting; var record &#x3D; tryCatch(innerFn, self, context); if (record.type &#x3D;&#x3D;&#x3D; &quot;normal&quot;) &#123; &#x2F;&#x2F; If an exception is thrown from innerFn, we leave state &#x3D;&#x3D;&#x3D; &#x2F;&#x2F; GenStateExecuting and loop back for another invocation. state &#x3D; context.done ? GenStateCompleted : GenStateSuspendedYield; if (record.arg &#x3D;&#x3D;&#x3D; ContinueSentinel) &#123; continue; &#125; return &#123; value: record.arg, done: context.done &#125;; &#125; else if (record.type &#x3D;&#x3D;&#x3D; &quot;throw&quot;) &#123; state &#x3D; GenStateCompleted; &#x2F;&#x2F; Dispatch the exception by looping back around to the &#x2F;&#x2F; context.dispatchException(context.arg) call above. context.method &#x3D; &quot;throw&quot;; context.arg &#x3D; record.arg; &#125; &#125; &#125;; &#125; &#x2F;&#x2F; Call delegate.iterator[context.method](context.arg) and handle the &#x2F;&#x2F; result, either by returning a &#123; value, done &#125; result from the &#x2F;&#x2F; delegate iterator, or by modifying context.method and context.arg, &#x2F;&#x2F; setting context.delegate to null, and returning the ContinueSentinel. function maybeInvokeDelegate(delegate, context) &#123; var method &#x3D; delegate.iterator[context.method]; if (method &#x3D;&#x3D;&#x3D; undefined) &#123; &#x2F;&#x2F; A .throw or .return when the delegate iterator has no .throw &#x2F;&#x2F; method always terminates the yield* loop. context.delegate &#x3D; null; if (context.method &#x3D;&#x3D;&#x3D; &quot;throw&quot;) &#123; if (delegate.iterator.return) &#123; &#x2F;&#x2F; If the delegate iterator has a return method, give it a &#x2F;&#x2F; chance to clean up. context.method &#x3D; &quot;return&quot;; context.arg &#x3D; undefined; maybeInvokeDelegate(delegate, context); if (context.method &#x3D;&#x3D;&#x3D; &quot;throw&quot;) &#123; &#x2F;&#x2F; If maybeInvokeDelegate(context) changed context.method from &#x2F;&#x2F; &quot;return&quot; to &quot;throw&quot;, let that override the TypeError below. return ContinueSentinel; &#125; &#125; context.method &#x3D; &quot;throw&quot;; context.arg &#x3D; new TypeError( &quot;The iterator does not provide a &#39;throw&#39; method&quot;); &#125; return ContinueSentinel; &#125; var record &#x3D; tryCatch(method, delegate.iterator, context.arg); if (record.type &#x3D;&#x3D;&#x3D; &quot;throw&quot;) &#123; context.method &#x3D; &quot;throw&quot;; context.arg &#x3D; record.arg; context.delegate &#x3D; null; return ContinueSentinel; &#125; var info &#x3D; record.arg; if (! info) &#123; context.method &#x3D; &quot;throw&quot;; context.arg &#x3D; new TypeError(&quot;iterator result is not an object&quot;); context.delegate &#x3D; null; return ContinueSentinel; &#125; if (info.done) &#123; &#x2F;&#x2F; Assign the result of the finished delegate to the temporary &#x2F;&#x2F; variable specified by delegate.resultName (see delegateYield). context[delegate.resultName] &#x3D; info.value; &#x2F;&#x2F; Resume execution at the desired location (see delegateYield). context.next &#x3D; delegate.nextLoc; &#x2F;&#x2F; If context.method was &quot;throw&quot; but the delegate handled the &#x2F;&#x2F; exception, let the outer generator proceed normally. If &#x2F;&#x2F; context.method was &quot;next&quot;, forget context.arg since it has been &#x2F;&#x2F; &quot;consumed&quot; by the delegate iterator. If context.method was &#x2F;&#x2F; &quot;return&quot;, allow the original .return call to continue in the &#x2F;&#x2F; outer generator. if (context.method !&#x3D;&#x3D; &quot;return&quot;) &#123; context.method &#x3D; &quot;next&quot;; context.arg &#x3D; undefined; &#125; &#125; else &#123; &#x2F;&#x2F; Re-yield the result returned by the delegate method. return info; &#125; &#x2F;&#x2F; The delegate iterator is finished, so forget it and continue with &#x2F;&#x2F; the outer generator. context.delegate &#x3D; null; return ContinueSentinel; &#125; &#x2F;&#x2F; Define Generator.prototype.&#123;next,throw,return&#125; in terms of the &#x2F;&#x2F; unified ._invoke helper method. defineIteratorMethods(Gp); Gp[toStringTagSymbol] &#x3D; &quot;Generator&quot;; &#x2F;&#x2F; A Generator should always return itself as the iterator object when the &#x2F;&#x2F; @@iterator function is called on it. Some browsers&#39; implementations of the &#x2F;&#x2F; iterator prototype chain incorrectly implement this, causing the Generator &#x2F;&#x2F; object to not be returned from this call. This ensures that doesn&#39;t happen. &#x2F;&#x2F; See https:&#x2F;&#x2F;github.com&#x2F;facebook&#x2F;regenerator&#x2F;issues&#x2F;274 for more details. Gp[iteratorSymbol] &#x3D; function() &#123; return this; &#125;; Gp.toString &#x3D; function() &#123; return &quot;[object Generator]&quot;; &#125;; function pushTryEntry(locs) &#123; var entry &#x3D; &#123; tryLoc: locs[0] &#125;; if (1 in locs) &#123; entry.catchLoc &#x3D; locs[1]; &#125; if (2 in locs) &#123; entry.finallyLoc &#x3D; locs[2]; entry.afterLoc &#x3D; locs[3]; &#125; this.tryEntries.push(entry); &#125; function resetTryEntry(entry) &#123; var record &#x3D; entry.completion || &#123;&#125;; record.type &#x3D; &quot;normal&quot;; delete record.arg; entry.completion &#x3D; record; &#125; function Context(tryLocsList) &#123; &#x2F;&#x2F; The root entry object (effectively a try statement without a catch &#x2F;&#x2F; or a finally block) gives us a place to store values thrown from &#x2F;&#x2F; locations where there is no enclosing try statement. this.tryEntries &#x3D; [&#123; tryLoc: &quot;root&quot; &#125;]; tryLocsList.forEach(pushTryEntry, this); this.reset(true); &#125; runtime.keys &#x3D; function(object) &#123; var keys &#x3D; []; for (var key in object) &#123; keys.push(key); &#125; keys.reverse(); &#x2F;&#x2F; Rather than returning an object with a next method, we keep &#x2F;&#x2F; things simple and return the next function itself. return function next() &#123; while (keys.length) &#123; var key &#x3D; keys.pop(); if (key in object) &#123; next.value &#x3D; key; next.done &#x3D; false; return next; &#125; &#125; &#x2F;&#x2F; To avoid creating an additional object, we just hang the .value &#x2F;&#x2F; and .done properties off the next function object itself. This &#x2F;&#x2F; also ensures that the minifier will not anonymize the function. next.done &#x3D; true; return next; &#125;; &#125;; function values(iterable) &#123; if (iterable) &#123; var iteratorMethod &#x3D; iterable[iteratorSymbol]; if (iteratorMethod) &#123; return iteratorMethod.call(iterable); &#125; if (typeof iterable.next &#x3D;&#x3D;&#x3D; &quot;function&quot;) &#123; return iterable; &#125; if (!isNaN(iterable.length)) &#123; var i &#x3D; -1, next &#x3D; function next() &#123; while (++i &lt; iterable.length) &#123; if (hasOwn.call(iterable, i)) &#123; next.value &#x3D; iterable[i]; next.done &#x3D; false; return next; &#125; &#125; next.value &#x3D; undefined; next.done &#x3D; true; return next; &#125;; return next.next &#x3D; next; &#125; &#125; &#x2F;&#x2F; Return an iterator with no values. return &#123; next: doneResult &#125;; &#125; runtime.values &#x3D; values; function doneResult() &#123; return &#123; value: undefined, done: true &#125;; &#125; Context.prototype &#x3D; &#123; constructor: Context, reset: function(skipTempReset) &#123; this.prev &#x3D; 0; this.next &#x3D; 0; &#x2F;&#x2F; Resetting context._sent for legacy support of Babel&#39;s &#x2F;&#x2F; function.sent implementation. this.sent &#x3D; this._sent &#x3D; undefined; this.done &#x3D; false; this.delegate &#x3D; null; this.method &#x3D; &quot;next&quot;; this.arg &#x3D; undefined; this.tryEntries.forEach(resetTryEntry); if (!skipTempReset) &#123; for (var name in this) &#123; &#x2F;&#x2F; Not sure about the optimal order of these conditions: if (name.charAt(0) &#x3D;&#x3D;&#x3D; &quot;t&quot; &amp;&amp; hasOwn.call(this, name) &amp;&amp; !isNaN(+name.slice(1))) &#123; this[name] &#x3D; undefined; &#125; &#125; &#125; &#125;, stop: function() &#123; this.done &#x3D; true; var rootEntry &#x3D; this.tryEntries[0]; var rootRecord &#x3D; rootEntry.completion; if (rootRecord.type &#x3D;&#x3D;&#x3D; &quot;throw&quot;) &#123; throw rootRecord.arg; &#125; return this.rval; &#125;, dispatchException: function(exception) &#123; if (this.done) &#123; throw exception; &#125; var context &#x3D; this; function handle(loc, caught) &#123; record.type &#x3D; &quot;throw&quot;; record.arg &#x3D; exception; context.next &#x3D; loc; if (caught) &#123; &#x2F;&#x2F; If the dispatched exception was caught by a catch block, &#x2F;&#x2F; then let that catch block handle the exception normally. context.method &#x3D; &quot;next&quot;; context.arg &#x3D; undefined; &#125; return !! caught; &#125; for (var i &#x3D; this.tryEntries.length - 1; i &gt;&#x3D; 0; --i) &#123; var entry &#x3D; this.tryEntries[i]; var record &#x3D; entry.completion; if (entry.tryLoc &#x3D;&#x3D;&#x3D; &quot;root&quot;) &#123; &#x2F;&#x2F; Exception thrown outside of any try block that could handle &#x2F;&#x2F; it, so set the completion value of the entire function to &#x2F;&#x2F; throw the exception. return handle(&quot;end&quot;); &#125; if (entry.tryLoc &lt;&#x3D; this.prev) &#123; var hasCatch &#x3D; hasOwn.call(entry, &quot;catchLoc&quot;); var hasFinally &#x3D; hasOwn.call(entry, &quot;finallyLoc&quot;); if (hasCatch &amp;&amp; hasFinally) &#123; if (this.prev &lt; entry.catchLoc) &#123; return handle(entry.catchLoc, true); &#125; else if (this.prev &lt; entry.finallyLoc) &#123; return handle(entry.finallyLoc); &#125; &#125; else if (hasCatch) &#123; if (this.prev &lt; entry.catchLoc) &#123; return handle(entry.catchLoc, true); &#125; &#125; else if (hasFinally) &#123; if (this.prev &lt; entry.finallyLoc) &#123; return handle(entry.finallyLoc); &#125; &#125; else &#123; throw new Error(&quot;try statement without catch or finally&quot;); &#125; &#125; &#125; &#125;, abrupt: function(type, arg) &#123; for (var i &#x3D; this.tryEntries.length - 1; i &gt;&#x3D; 0; --i) &#123; var entry &#x3D; this.tryEntries[i]; if (entry.tryLoc &lt;&#x3D; this.prev &amp;&amp; hasOwn.call(entry, &quot;finallyLoc&quot;) &amp;&amp; this.prev &lt; entry.finallyLoc) &#123; var finallyEntry &#x3D; entry; break; &#125; &#125; if (finallyEntry &amp;&amp; (type &#x3D;&#x3D;&#x3D; &quot;break&quot; || type &#x3D;&#x3D;&#x3D; &quot;continue&quot;) &amp;&amp; finallyEntry.tryLoc &lt;&#x3D; arg &amp;&amp; arg &lt;&#x3D; finallyEntry.finallyLoc) &#123; &#x2F;&#x2F; Ignore the finally entry if control is not jumping to a &#x2F;&#x2F; location outside the try&#x2F;catch block. finallyEntry &#x3D; null; &#125; var record &#x3D; finallyEntry ? finallyEntry.completion : &#123;&#125;; record.type &#x3D; type; record.arg &#x3D; arg; if (finallyEntry) &#123; this.method &#x3D; &quot;next&quot;; this.next &#x3D; finallyEntry.finallyLoc; return ContinueSentinel; &#125; return this.complete(record); &#125;, complete: function(record, afterLoc) &#123; if (record.type &#x3D;&#x3D;&#x3D; &quot;throw&quot;) &#123; throw record.arg; &#125; if (record.type &#x3D;&#x3D;&#x3D; &quot;break&quot; || record.type &#x3D;&#x3D;&#x3D; &quot;continue&quot;) &#123; this.next &#x3D; record.arg; &#125; else if (record.type &#x3D;&#x3D;&#x3D; &quot;return&quot;) &#123; this.rval &#x3D; this.arg &#x3D; record.arg; this.method &#x3D; &quot;return&quot;; this.next &#x3D; &quot;end&quot;; &#125; else if (record.type &#x3D;&#x3D;&#x3D; &quot;normal&quot; &amp;&amp; afterLoc) &#123; this.next &#x3D; afterLoc; &#125; return ContinueSentinel; &#125;, finish: function(finallyLoc) &#123; for (var i &#x3D; this.tryEntries.length - 1; i &gt;&#x3D; 0; --i) &#123; var entry &#x3D; this.tryEntries[i]; if (entry.finallyLoc &#x3D;&#x3D;&#x3D; finallyLoc) &#123; this.complete(entry.completion, entry.afterLoc); resetTryEntry(entry); return ContinueSentinel; &#125; &#125; &#125;, &quot;catch&quot;: function(tryLoc) &#123; for (var i &#x3D; this.tryEntries.length - 1; i &gt;&#x3D; 0; --i) &#123; var entry &#x3D; this.tryEntries[i]; if (entry.tryLoc &#x3D;&#x3D;&#x3D; tryLoc) &#123; var record &#x3D; entry.completion; if (record.type &#x3D;&#x3D;&#x3D; &quot;throw&quot;) &#123; var thrown &#x3D; record.arg; resetTryEntry(entry); &#125; return thrown; &#125; &#125; &#x2F;&#x2F; The context.catch method must only be called with a location &#x2F;&#x2F; argument that corresponds to a known catch block. throw new Error(&quot;illegal catch attempt&quot;); &#125;, delegateYield: function(iterable, resultName, nextLoc) &#123; this.delegate &#x3D; &#123; iterator: values(iterable), resultName: resultName, nextLoc: nextLoc &#125;; if (this.method &#x3D;&#x3D;&#x3D; &quot;next&quot;) &#123; &#x2F;&#x2F; Deliberately forget the last sent value so that we don&#39;t &#x2F;&#x2F; accidentally pass it on to the delegate. this.arg &#x3D; undefined; &#125; return ContinueSentinel; &#125; &#125;; &#125;)( &#x2F;&#x2F; In sloppy mode, unbound &#96;this&#96; refers to the global object, fallback to &#x2F;&#x2F; Function constructor if we&#39;re in global strict mode. That is sadly a form &#x2F;&#x2F; of indirect eval which violates Content Security Policy. (function() &#123; return this &#125;)() || Function(&quot;return this&quot;)() ); 具体测试代码如图。 注意的事，awiat 必须在async中使用。否则无效 request-promise 请求数据并插入 云数据库 只能单条插入 解决问题： 当插入 数据重复的时候，不用插入。 此处应该是算法。查重，去重，重新构建对象数组 先读取 数据库中的集合所有数据 对于云函数来说 限制最多读取100条数据而小程序端获取 限制最多读取20条数据 如何突破这种限制 1234567891011121314151617181920212223242526272829303132333435363738&#x2F;&#x2F;假设数据有210条数据&#x2F;&#x2F;计算总数也是一个异步的过程。let count &#x3D; await playlistCollection.count()&#x2F;&#x2F;此时count是一个对象, 获取当前总的数据let total &#x3D; countResult.total&#x2F;&#x2F;一次最多读100条MAX_LIMIT &#x3D; 100&#x2F;&#x2F;那分三次读出 向上取整let batchTimes &#x3D; Math.ceil((total &#x2F; MAX_LIMIT))&#x2F;&#x2F; 每次取数据的时候都是异步操作，&#x2F;&#x2F; 每次的异步任务完成后，再拼接let tasks &#x3D; []for(let i &#x3D; 0; i &lt; batchTimes; i++)&#123; &#x2F;&#x2F;每次取的数据开始地址不一样 let promiseId &#x3D; playlistCollection.skip(i * MAX_LIMIT).limit(MAX_LIMIT).get() tasks.push(promiseId)&#125;let list &#x3D; &#123; data: []&#125;if(tasks.length &gt; 0)&#123;&#x2F;&#x2F; acc 之前的值&#x2F;&#x2F; cur 当前循环遍历的值 list &#x3D; (await Promise.all(tasks)).reduce((acc, cur) &#x3D;&gt; &#123; return &#123; data: acc.data.concat(cur.data) &#125; &#125;)&#125; 定时触发器 触发云函数 在云函数 右键 创建 config.json 填写内容 1234567891011121314151617181920212223&#123; &#x2F;&#x2F; triggers 字段是触发器数组，目前仅支持一个触发器，即数组只能填写一个，不可添加多个 &#x2F;&#x2F; JSON 文件不能添加注释，此处是为了截图 好理解 &quot;triggers&quot;: [ &#123; &#x2F;&#x2F; name: 触发器的名字，规则见下方说明 &quot;name&quot;: &quot;myTrigger&quot;, &#x2F;&#x2F; type: 触发器类型，目前仅支持 timer (即 定时触发器) &quot;type&quot;: &quot;timer&quot;, &#x2F;&#x2F; config: 触发器配置，在定时触发器下，config 格式为 cron 表达式，规则见下方说明&#x2F;&#x2F;0 0 2 1 * * * 表示在每月的1日的凌晨2点触发&#x2F;&#x2F;0 15 10 * * MON-FRI * 表示在周一到周五每天上午10: 15触发&#x2F;&#x2F;0 0 10,14,16 * * * * 表示在每天上午10点，下午2点，4点触发&#x2F;&#x2F;0 *&#x2F;30 9-17 * * * * 表示在每天上午9点到下午5点内每半小时触发&#x2F;&#x2F;0 0 12 * * WED * 表示在每个星期三中午12点触发 &quot;config&quot;: &quot;0 0 10,14,16,23 * * * *&quot; &#125; ]&#125; 右键云函数 上传触发器 上传前确认，json文件没有注释 123456789&#123; &quot;triggers&quot;: [ &#123; &quot;name&quot;: &quot;myTrigger&quot;, &quot;type&quot;: &quot;timer&quot;, &quot;config&quot;: &quot;0 0 10,14,16,23 * * * *&quot; &#125; ]&#125;","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"js异步操作","slug":"js异步操作","permalink":"https://ebig.vip/tags/js%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/"}]},{"title":"云开发笔记（三）","slug":"wx-mini/wx-mini-cloud-note3","date":"2020-03-11T14:36:54.000Z","updated":"2020-05-26T13:45:36.000Z","comments":true,"path":"wx-mini/wx-mini-cloud-note3/","link":"","permalink":"https://ebig.vip/wx-mini/wx-mini-cloud-note3/","excerpt":"云开发笔记（三）","text":"组件内部使用外部wxss样式 经过测试，使用Vant Weapp组件开发， 自定义组件可以随便使用。不用考虑它自己的样式。 下面是自己定义的样式引用 首先在调用组件的page中传入参数 1&lt;com-search iconfont-Propra&#x3D;&quot;iconfont&quot; iconfont-search-Propra&#x3D;&quot;iconfont-sousuo&quot; &#x2F;&gt; iconfont-Propra ：随便起。但是尽量我感觉还是一样比较好iconfont 必须是全局CSS中有的类名 在组件js文件中接收 1234externalClasses:[ &#39;iconfont-Propra&#39;, &#39;iconfont-search-Propra&#39;] 使用 别名。 1&lt;van-icon name&#x3D;&quot;search&quot; class&#x3D;&quot;iconfont-Propra iconfont-search-Propra&quot;&#x2F;&gt; 另一种方式 在组件中，添加如下内容 123options:&#123; styleIsolation: &#39;apply-shared&#39; &#125; isolated 表示启用样式隔离，在自定义组件内外，使用 class 指定的样式将不会相互影响（一般情况下的默认值）； apply-shared 表示页面 wxss 样式将影响到自定义组件，但自定义组件 wxss 中指定的样式不会影响页面； shared 表示页面 wxss 样式将影响到自定义组件，自定义组件 wxss 中指定的样式也会影响页面和其他设置了 apply-shared 或 shared 的自定义组件。（这个选项在插件中不可用。） 还有一种方式：引用页面或父组件的样式 即使启用了样式隔离 isolated ，组件仍然可以在局部引用组件所在页面的样式或父组件的样式。 例如，如果在页面 wxss 中定义了： 123.blue-text &#123; color: blue;&#125; 在这个组件中可以使用 ~ 来引用这个类的样式： 1&lt;view class&#x3D;&quot;~blue-text&quot;&gt; 这段文本是蓝色的 &lt;&#x2F;view&gt; 如果在一个组件的父组件 wxss 中定义了： 123.red-text &#123; color: red;&#125; 在这个组件中可以使用 ^ 来引用这个类的样式： 1&lt;view class&#x3D;&quot;^red-text&quot;&gt; 这段文本是红色的 &lt;&#x2F;view&gt; 也可以连续使用多个 ^ 来引用祖先组件中的样式。 组件内部调用组件和Page一样 功能： login组件使用 bottom-modal组件的下弹出框。 建立login 组件 login 引用。 在bottom-modal组件中定义 slot1&lt;slot name&#x3D;&quot;modal-content&quot;&gt;默认内容&lt;&#x2F;slot&gt; login组件使用 12345&lt;com-bottom-modal&gt; &lt;view slot&#x3D;&quot;modal-content&quot;&gt; &lt;button&gt;获取微信授权信息&lt;&#x2F;button&gt; &lt;&#x2F;view&gt;&lt;&#x2F;com-bottom-modal&gt; 在page页 由调用 bottom-modal 改为 调用login 123456789101112&#x2F;&#x2F;json文件改为 &quot;usingComponents&quot;: &#123; &quot;com-search&quot;:&quot;..&#x2F;..&#x2F;components&#x2F;search&#x2F;search&quot;, &#x2F;&#x2F;&quot;com-modal&quot;: &quot;..&#x2F;..&#x2F;components&#x2F;bottom-model&#x2F;bottom-model&quot;, &quot;com-login&quot;: &quot;..&#x2F;..&#x2F;components&#x2F;login&#x2F;login&quot; &#125;,&#x2F;&#x2F;wxml中改为 &lt;com-login modalShow&#x3D;&quot;&#123;&#123;modalShow&#125;&#125;&quot; &gt; &lt;&#x2F;com-login&gt; 组件引用组件json文件引入 1234&quot;usingComponents&quot;: &#123; &quot;com-login&quot;: &quot;../login/login&quot; &#125; 注意组件是否要求传递参数。 123456&#x2F;** * 组件的属性列表, login组件 *&#x2F;properties: &#123; modalShow: Boolean&#125;, 故在引用组件页 blog-ctrl 设置参数 1&lt;com-login modalShow&#x3D;&quot;&#123;&#123;loginShow&#125;&#125;&quot;&#x2F;&gt; loginShow 应该写在 data中， 因为不是传递进来的， 是自用的 123456&#x2F;** * 组件的初始数据， blog-ctrl组件 *&#x2F;data: &#123; loginShow: false&#125;, this.setData() 的回调函数12345678&#x2F;&#x2F;授权框消失，评论框出现this.setData(&#123; loginShow: false,&#125;, () &#x3D;&gt; &#123; this.setData(&#123; modalShow: true &#125;)&#125;)","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"自定义组件","slug":"自定义组件","permalink":"https://ebig.vip/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"}]},{"title":"小笔记","slug":"web/hc","date":"2020-03-10T15:21:20.000Z","updated":"2020-09-29T04:53:38.813Z","comments":true,"path":"web/hc/","link":"","permalink":"https://ebig.vip/web/hc/","excerpt":"html css 小笔记","text":"浏览器内核 IE trident Firefox Gecko Chrome webkit/blink safari Webkit Opera presto CSS选择器ID，class，标签，通配符，属性，伪类，伪元素，直接子元素（&gt;），挨着的选择(+) 选择器 权重 !improtant Infinity 行间样式 1000 id 100 class、属性、伪类 10 标签选择器、伪元素 1 通配符 0 此外还有 父子选择器、派生选择器 直接子元素选择器 并列选择器 分组选择器 首行缩进text-indent: 2em; enctype类型发送请求的编码形式 application/x-www-form-urlecoded(默认) multipart/form-data(用于文件上传) text/plain CSS预处理器less, stylus,saas","categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"}]},{"title":"云开发笔记（二）","slug":"wx-mini/wx-mini-cloud-note2","date":"2020-03-10T14:36:54.000Z","updated":"2020-10-01T06:17:32.349Z","comments":true,"path":"wx-mini/wx-mini-cloud-note2/","link":"","permalink":"https://ebig.vip/wx-mini/wx-mini-cloud-note2/","excerpt":"云开发笔记（二）","text":"本地存储 setStorage: 异步 setStorageSync: 同步 123456_setMusicList:function(event)&#123; wx.setStorage(&#123; data: this.data.musiclist, key: &#39;musiclist&#39;, &#125;)&#125;, 充满整个容器如果想要一个元素，充满整个容器 12345position: absolute;top: 0;bottom: 0;left: 0;right: 0; 如何引入iconfont阿里巴巴矢量库 加入购物车，添加到项目，生成在线链接，下载，存到wxss文件中。 引入@import &#39; &#39; 然后使用。 ES6在tcb-router 传参的时候，如果 属性名与属性值一个名字。 则可以简写。 只写一个即可。 12345678910wx.cloud.callFunction(&#123; name: &#39;music&#39;, data: &#123; &#x2F;*只写一个。*&#x2F; musicId, $url: &#39;musicUrl&#39; &#125;&#125;) 音乐暂停123456789101112131415161718192021222324252627282930&lt;image class&#x3D;&quot;player-img rotation &#123;&#123;isPlaying?&#39;&#39;:&#39;rotation-paused&#39;&#125;&#125;&quot; src&#x3D;&quot;&#123;&#123;picUrl&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt;&#x2F;* *对应CSS样式 *&#x2F; .rotation&#123; animation: rotation 12s linear infinite; -moz-animation: rotation 12s linear infinite; -webkit-animation: rotation 12s linear infinite; -o-animation: rotation 12s linear infinite;&#125;.rotation-paused&#123; animation-play-state: paused; -webkit-animation-play-state: paused; -o-animation-play-state: paused; -moz-animation-play-state: paused;&#125;@keyframes rotation &#123; from &#123; transform: rotate(0deg); &#125; to &#123; transform: rotate(360deg); &#125;&#125; isPlaying 判断是否播放状态，rotation 为旋转。 rotation-paused为暂停状态。 注意的是。rotation 并没有写进 三目运算符中。只有rotation-paused在。 下面是对比图 没有写进三目运算符 写进三目运算符 可移动的元素 movable-view必须在 movable-area 组件中，并且必须是直接子节点，否则不能移动。 属性 说明 direction movable-view的移动方向，属性值有all、vertical、horizontal、none x 定义x轴方向的偏移，如果x的值不在可移动范围内，会自动移动到可移动范围；改变x的值会触发动画 y 定义y轴方向的偏移，如果y的值不在可移动范围内，会自动移动到可移动范围；改变y的值会触发动画 damping 阻尼系数，用于控制x或y改变时的动画和过界回弹的动画，值越大移动越快 bindchange 拖动过程中触发的事件，event.detail = {x, y, source} … … … … bindchange 返回的 source 表示产生移动的原因 值 说明 touch 拖动 touch-out-of-bounds 超出移动范围 out-of-bounds 超出移动范围后的回弹 friction 惯性 空字符串 setData Bug &amp; Tip tip: movable-view 必须设置width和height属性，不设置默认为10px tip: movable-view 默认为绝对定位，top和left属性为0px 实例 123456&lt;view class&#x3D;&quot;progress-control&quot;&gt; &lt;movable-area class&#x3D;&quot;movable-area&quot;&gt; &lt;movable-view direction&#x3D;&quot;horizontal&quot; class&#x3D;&quot;movable-view&quot; damping&#x3D;&quot;1000&quot; x&#x3D;&quot;&#123;&#123;moveableDis&#125;&#125;&quot;&gt;&lt;&#x2F;movable-view&gt; &lt;&#x2F;movable-area&gt; &lt;progress stroke-width&#x3D;&quot;4&quot; backgroundColor&#x3D;&quot;#969696&quot; activeColor&#x3D;&quot;#fff&quot; percent&#x3D;&quot;&#123;&#123;progress&#125;&#125;&quot;&gt;&lt;&#x2F;progress&gt;&lt;&#x2F;view&gt; 1234567891011121314151617181920212223242526272829303132333435&#x2F;* components&#x2F;progressbar&#x2F;progressbar.wxss *&#x2F;.container&#123; display: flex; align-items: center;&#125;.progress-control&#123; position: relative; flex: 1;&#125;.movable-area&#123; width: 100%; height: 34rpx; position: absolute; bottom: -14rpx; left: 0;&#125;.movable-view&#123; width: 36rpx; height: 36rpx; background: #fff; border-radius: 50%;&#125;.time&#123; width: 64rpx; padding: 0 20rpx; font-size: 24rpx; font-family: NotoSansHans-Regular; font-weight: 400; color: rgba(255, 255, 255, 1); line-height: 30rpx;&#125; 上面用到的progress 进度条。组件属性的长度单位默认为px，2.4.0起支持传入单位(rpx/px)。属性|说明—|—percent|百分比0~100stroke-width|进度条线的宽度color| 进度条颜色（请使用activeColor）activeColor|已选择的进度条的颜色backgroundColor|未选择的进度条的颜色active|进度条从左往右的动画active-mode|backwards: 动画从头播；forwards：动画从上次结束点接着播 获取节点信息 boundingClientRect：添加节点的布局位置的查询请求，返回的信息。如控制台所示： undefined获取全局唯一的背景音频管理器当获取时长的时候，会返回undefined 1234567891011&#x2F;&#x2F;可以播放的状态bgam.onCanplay(() &#x3D;&gt; &#123; if(typeof bgam.duration !&#x3D; &#39;undefined&#39;)&#123; this.setTime() &#125;else&#123; setTimeout(() &#x3D;&gt; &#123; this.setTime() &#125;,1000) &#125;&#125;) 赋值123456789101112&#x2F;*** 组件的初始数据*&#x2F;data: &#123;showTime:&#123; currentTime: &#39;00:00&#39;, totalTime: &#39;00:00&#39;&#125;,moveableDis: 0,progress: 0,&#125;, 如何给组件data中的对象中的属性值赋值 1[&#39;showTime.totalTime&#39;] : &#96;$&#123;durationFmt.min&#125;:$&#123;durationFmt.sec&#125;&#96; 如何在组件中，调用父元素的方法。对于播放控制，当进度条结束的时候，应该自动播放下一首。 而下一首对应的控制方法在pages页中。 需要在组件中调用父元素的方法 激活 123bgam.onEnded(() &#x3D;&gt; &#123; this.triggerEvent(&#39;musicEnd&#39;)&#125;) 使用 bindmusicEnd 也可以写成bind:musicEnd progress-bar 为自定义组件 123&lt;view class&#x3D;&quot;progress-bar&quot;&gt; &lt;progress-bar class&#x3D;&quot;&quot; bindmusicEnd&#x3D;&quot;onNext&quot;&#x2F;&gt;&lt;&#x2F;view&gt; bug当进度条进行拖动时，就会触发 onTimeUpdate事件。导致一直在setData({}),并且，导致进度条会闪 12345678910111213141516171819bgam.onTimeUpdate(() &#x3D;&gt; &#123; const currentTime &#x3D; bgam.currentTime const duration &#x3D; bgam.duration const currentTimeFmt &#x3D; this.dateFormat(currentTime) const sec &#x3D; currentTime.toString().split(&#39;.&#39;)[0] if(sec !&#x3D; currentSec)&#123; &#x2F;&#x2F; console.log(currentTime) &#x2F;** * * *&#x2F; this.setData(&#123; moveableDis: (movableAreaWidth - movableViewWidth) * currentTime &#x2F;duration, progress: currentTime &#x2F; duration * 100, [&#39;showTime.currentTime&#39;]: &#96;$&#123;currentTimeFmt.min&#125;:$&#123;currentTimeFmt.sec&#125;&#96; &#125;) &#125; currentSec &#x3D; sec&#125;) 解决办法： 定义一个标志 isMoving 当拖动得时候，会触发 onChange事件 1isMoving &#x3D; true 当触发完成，会执行onTouchEnd事件 1isMoving &#x3D; false 在onTimeUpdate中isMoving =true时在执行 但是由于 onChange 与onTouchEnd 执行相差时间太短。甚至刚刚执行完onTouchEnd 就执行了onChange。根本没有改变isMoving的值。 但我发现。在执行完之后 肯定要执行 onPlay方法 于是在 onPlay方法中添加 1isMoving &#x3D; false 频繁切换 用hidden组件之间传参123this.triggerEvent(&#39;timeUpdate&#39;, &#123; currentTime&#125;) 如何在组件内部事件触发，设置当前组件父元素的值在组件中激活 事件 123456bgam.onStop(() &#x3D;&gt; &#123; this.triggerEvent(&#39;musicPlay&#39;)&#125;)bgam.onPause(() &#x3D;&gt; &#123; this.triggerEvent(&#39;musicPause&#39;)&#125;) rpx 与 px 在js中换算1234567891011lifetimes:&#123; ready()&#123; &#x2F;&#x2F;750rpx wx.getSystemInfo(&#123; success: (res) &#x3D;&gt; &#123; &#x2F;&#x2F;px单位 &#x3D;&gt; 1rpx大小 &#x3D;&gt; 一行歌词高度px + 1个字体放大高度 lyricHeight &#x3D; res.screenWidth &#x2F; 750 * 64 &#125;, &#125;) &#125;&#125;,","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"云开发笔记（一）","slug":"wx-mini/wx-mini-cloud-note1","date":"2020-03-09T14:36:54.000Z","updated":"2020-05-26T13:45:36.000Z","comments":true,"path":"wx-mini/wx-mini-cloud-note1/","link":"","permalink":"https://ebig.vip/wx-mini/wx-mini-cloud-note1/","excerpt":"云开发笔记（一）","text":"增删改查 .add .doc().remove() .update where(条件).get().then(res =&gt;{}).catch(err =&gt;{})调用云函数123wx.cloud.callFunction(&#123; name: &#39;login&#39;&#125;).then(res).catch(err) 云函数入口函数12345export.main &#x3D; async (event, context)&#123; try&#123; return await db.() ... &#125;&#125; 单张图片上传 选择图片 获得临时路径 得到FileId 存储FileID123456789101112131415161718192021222324wx.chooseImage(&#123; count:1,&#x2F;&#x2F; 原文件 压缩 sizeType:[&#39;original&#39;,&#39;compressed&#39;], sourceType:[&#39;album&#39;,&#39;camera&#39;]&#125;).then(res &#x3D;&gt;&#123; const tempFilePaths &#x3D; res.tempFilePaths&#x2F;&#x2F;上传文件 利用临时路径 wx.cloud.uploadFile(&#123; cloudPath: new Date() + &#39;.png&#39; , filePath: tempFilePaths[0] &#125;).then(res &#x3D;&gt; &#123; &#x2F;&#x2F;返回一个fileID当前文件唯一标识 console.log(res.fileID) &#x2F;&#x2F;存储fileID db.collection().add(&#123; data:&#123; fileID: res.fileID &#125; &#125;) &#125;).catch()&#125;).catch() 多张图片上传缺失用云函数 请求链接相应返回数据 给云函数安装依赖 右键云函数，在终端打开。 12npm install --save request npm install --save request-promise 调用12var rp &#x3D; require(&#39;request-promise&#39;);rp(&#39; 链接 &#39;).then().catch() 组件自定义缺失处理文字溢出12345display:-webkit-box-webkit-box-orient:vertical-webkit-line-clamp:2overflow:hiddentext-overflow:ellipsis 数字格式化处理（在自定义组件中） 数据监听器，监听要变化的数据 对象中的属性 监听方法 [&#39;playlist.playCount&#39;] 写相应的方法 data中定义新的变量 给新的变量赋值 显示界面 1234567891011121314151617181920observers:&#123; [&#39;playlist.playCount&#39;](val)&#123; this._tranNumber(val,2) this.setData(&#123; &#x2F;&#x2F;错误 会导致循环并崩溃 [&#39;playlist.playCount&#39;]:this._tranNumber(val,2) &#x2F;** *正确 *1. 在data 中初始化 数据 data是组件的初始化数据。 *2. 赋值 *3. 前端调用 **&#x2F; _count:this._tranNumber(val,2) &#125;) &#125;&#125;,data:&#123; _count:0&#125; 组件自定义方法123456789101112131415methods:&#123;&#x2F;** * * 处理数字 * **&#x2F; _tranNumber(num, point)&#123; let numStr &#x3D; num.toString().split(&#39;.&#39;)[0] if(numStr.length &lt; 6)&#123;return numStr&#125; else if&#123; 6 - 8&#125;&#123; let decimal &#x3D; numStr.substring(numStr.length - 4, numStr.length - 4+point) return parseFloat(parseInt（num&#x2F;10000）+&#39;.&#39;+decimal) + &#39;万&#39; &#125; &#125;&#125; wx:key 的奥秘 如果是数组，并且 绑定前面得事件索引，比如复选框跟随更改索引。1wx:key&#x3D;&quot;*this&quot; 如果是对象1wx:key &#x3D;&quot;id&quot;","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"tcb-router 路由","slug":"wx-mini/wx-mini-cloud-tcbrouter","date":"2020-03-07T14:36:54.000Z","updated":"2020-10-01T06:17:32.350Z","comments":true,"path":"wx-mini/wx-mini-cloud-tcbrouter/","link":"","permalink":"https://ebig.vip/wx-mini/wx-mini-cloud-tcbrouter/","excerpt":"主要包含 tcb-router 路由相关内容","text":"监听刷新12&#x2F;&#x2F; 在json文件中配置 &quot;enablePullDownRefresh&quot;: true 12345678&#x2F;&#x2F; 在js中配置&#x2F;&#x2F; 页面相关事件处理函数--监听用户下拉动作onPullDownRefresh: function () &#123; this.setData()&#125;&#x2F;&#x2F; 拼接 数据 this.data.xxx.concat( xxx ) bug: 当下拉刷新的时候，数据返回回来，上方的三个小点还在 可以在函数执行完毕后 1wx.stopPullDownRefresh() 云函数路由优化 一个用户在云环境中只能创建50个云函数 相似的请求归类到一个云函数处理 比如，对音乐的操作都归类到一个云函数中 tcb-router 是一个koa风格的云函数路由库 koa洋葱模型它最大的特点就是独特的中间件流程控制。 图很清晰的表明了一个请求是如何经过中间件最后生成响应的。 使用tcb-router源码地址：Github 对云函数 终端打开安装。 定义 12345678const tcbRouter &#x3D; require(&#39;tcb-router&#39;) &#x2F;** * 将 event 传入，tcb会自动处理事件中的参数 * * 必须在最后 return app.serve() *&#x2F;const app &#x3D; new tcbRouter(&#123;event&#125;) 分析 xxx.router() 就是单个的函数 xxx.use() 共同的需求或者说是功能 1234567891011121314151617181920212223242526272829&#x2F;** * 无论是 获取 音乐 还是电影 都有一个需求是 获取 用户的openid * 就是用 xxx.use() * event 天然有openId * * next() : 中间件关联 *&#x2F;app.use(async(ctx, next) &#x3D;&gt; &#123; ctx.data &#x3D; &#123;&#125; ctx.data.openId &#x3D; event.userInfo.openId await next()&#125;)app.router(&#39;music&#39;, async(ctx, next) &#x3D;&gt; &#123; ctx.data.musicName &#x3D; &#39;数鸭子&#39; ctx.data.musicAublm &#x3D; &#39;儿歌精选&#39; await next()&#125;, async(ctx, next) &#x3D;&gt; &#123; ctx.data.musicType &#x3D;&#39;儿歌&#39; &#x2F;** * 完成后， 返回data中的值 *&#x2F; ctx.body &#x3D; &#123; data: ctx.data &#125;&#125;) 小程序端调用函数1234567891011wx.cloud.callFunction(&#123; name: &#39;tcbRouter&#39;, data: &#123; &#x2F;** * $url: &#39; xxx &#39; *&#x2F; $url: &#39;music&#39; &#125; &#125;).then(res &#x3D;&gt; &#123; console.log(res) &#125;) 以上模型，在demo中为下图： 调用顺序为： 也正是验证了洋葱模型！一层层进，一层层出。 调用数据 结构","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"tcb router","slug":"tcb-router","permalink":"https://ebig.vip/tags/tcb-router/"}]},{"title":"Github 无法访问","slug":"Plugin-note/GitHub-problem","date":"2020-03-06T04:37:47.000Z","updated":"2020-09-29T04:56:47.456Z","comments":true,"path":"Plugin-note/GitHub-problem/","link":"","permalink":"https://ebig.vip/Plugin-note/GitHub-problem/","excerpt":"注意每个人的都不一样。需要自己电脑查。 并且也会变化，我已经改过好多次了。","text":"GitHub.com无法打开 C:\\Windows\\System32\\drivers\\etc 找到hosts 三个地址获取ip github.com github.global.ssl.fastly.net gist.github.com 拿到地址，将hosts 文件后 添加或者替换 不能直接修改hosts文件，需要将文件复制粘贴到桌面（或其它地方）然后替换 格式如下： 123456&#x2F;&#x2F;只是格式!#github119.187.97.75 github.com140.82.113.20 gist.github.com199.232.69.194 github.global.ssl.fastly.net 执行文件 打开cmd: 执行：ipconfig /flushdns","categories":[{"name":"工具","slug":"工具","permalink":"https://ebig.vip/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Chrome","slug":"Chrome","permalink":"https://ebig.vip/tags/Chrome/"},{"name":"工具","slug":"工具","permalink":"https://ebig.vip/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"微信开发者工具快捷键","slug":"wx-mini/wx-mini-hotkey","date":"2020-02-27T14:36:54.000Z","updated":"2020-05-26T13:45:36.000Z","comments":true,"path":"wx-mini/wx-mini-hotkey/","link":"","permalink":"https://ebig.vip/wx-mini/wx-mini-hotkey/","excerpt":"微信开发者工具快捷键","text":"操作 命令 打开快捷键面板 F1 打开/关闭工具栏 Ctrl+Shift+T 打开/关闭模拟器 Ctrl+Shift+D 打开/关闭调试器 Ctrl+Shift+M 格式化文件 Shift+Alt+F 编译 Ctrl+B 刷新 Ctrl+R 删除行 Ctrl+Shift+K 向上复制行 Shift+Alt+↑ 向上移动行 Alt+↑ 向下复制行 Shift+Alt+↓ 向下移动行 Alt+↓ 更改所有匹配项 Ctrl+F2 替换 Ctrl+H 查找 Ctrl+F 跳转到某行代码 Ctrl+G 跳转到某个方法 Ctrl+Shift+O 跳转文件 Ctrl+P 最近文件 Ctrl+E 切换块注释 Shift+Alt+A 切换行注释 Ctrl+/ 查找所有引用 Shift+F12 在上面插入行 Ctrl+Shift+↩ 在上面添加光标 Ctrl+Alt+↑ 在下面插入行 Ctrl+↩ 在下面添加光标 Ctrl+Alt+↓ 在行尾添加光标 Shift+Alt+I 打开/关闭编辑器 Ctrl+Shift+E 打开/关闭目录树 Ctrl+Shift+I 预览 Ctrl+Shift+P 上传 Ctrl+Shift+U Show Accessibility Help Alt+F1 以递归方式展开 Ctrl+K Ctrl+] 以递归方式折叠 Ctrl+K Ctrl+[ 全部展开 Ctrl+K Ctrl+J 全部折叠 Ctrl+K Ctrl+O 切换Tab键是否移动焦点 Ctrl+M 删除行注释 Ctrl+K Ctrl+U 将上次选择移动到下一个查找匹配项 Ctrl+K Ctrl+D 将选择添加到下一个查找匹配项 Ctrl+D 展开 Ctrl+Shift+] 打开侧边的定义 Ctrl+K Ctrl+F12 打开选择 Shift+Alt+→ 折叠 Ctrl+Shift+[ 折叠级别1 Ctrl+K Ctrl+1 折叠级别2 Ctrl+K Ctrl+2 折叠级别3 Ctrl+K Ctrl+3 折叠级别4 Ctrl+K Ctrl+4 折叠级别5 Ctrl+K Ctrl+5 折叠级别6 Ctrl+K Ctrl+6 折叠级别7 Ctrl+K Ctrl+7 折叠级别8 Ctrl+K Ctrl+8 折叠级别9 Ctrl+K Ctrl+9 显示悬停 Ctrl+K Ctrl+I 显示编辑器上下文菜单 Shift+F10 替换为上一个值 Ctrl+Shift+, 替换为下一个值 Ctrl+Shift+. 查找上一个 Shift+F3 查找上一个选择 Ctrl+Shift+F3 查找下一个 F3 查找下一个选择 Ctrl+F3 查看定义 Alt+F12 添加行注释 Ctrl+K Ctrl+C 缩小选择 Shift+Alt+← 行减少缩进 Ctrl+[ 行缩进 Ctrl+] 裁剪尾随空格 Ctrl+K Ctrl+X 触发参数提示 Ctrl+Shift+Space 触发建议 Ctrl+Space 转到上一个错误或警告 Shift+F8 转到喜爱个错误或警告 F8 转到定义 Ctrl+F12 转到括号 Ctrl+Shift+\\ 选择所有找到的查找匹配项 Ctrl+Shift+L","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"sublime Text3 常用插件","slug":"Plugin-note/Sublime-Text3","date":"2020-02-25T04:37:47.000Z","updated":"2020-09-29T04:58:11.619Z","comments":true,"path":"Plugin-note/Sublime-Text3/","link":"","permalink":"https://ebig.vip/Plugin-note/Sublime-Text3/","excerpt":"精简备份 sublime Text3 常用插件","text":"HTML 5规范html 5规范。 Emmet快捷键。 zen coding升级版。 问题百度经验 文件位置： 1234PreferencesBrower Packages上一级 Installed Packages新建PyV8 在里面解压文件。 JSFormatjavaScript 的代码格式化插件。 在已压缩的JS文件中，右键选择jsFormat或者使用默认快捷键（Ctrl+Alt+F）。 JQueryjQ函数提示。 DocBlockr生成优美注释。 输入/*、/**然后回车。 ColorPicker快捷键Windows: ctrl+shift+c。 ColorHighlighter显示所选颜色值的颜色，并集成了ColorPicker AutoFileName快捷输入文件名，输入”/”即可看到相对于本项目文件夹的其他文件。 LESSLESS高亮插件。 Alignment”=”号对齐 ， 默认快捷键Ctrl+Alt+A和QQ截屏冲突，可设置其他快捷键如：Ctrl+Shift+Alt+A；先选择要对齐的文本。 SideBarEnhancements侧栏菜单扩充功能。 分屏对应的快捷键与分屏情况如下： 1234567Alt+Shift+1 Single 独屏Alt+Shift+2 Columns:2 纵向二栏分屏Alt+Shift+3 Columns:3 纵向三栏分屏Alt+Shift+4 Columns:4 纵向四栏分屏Alt+Shift+8 Rows:2 横向二栏分屏Alt+Shift+9 Rows:3 横向三栏分屏Alt+Shift+5 Grid 四格式分屏","categories":[{"name":"工具","slug":"工具","permalink":"https://ebig.vip/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Chrome","slug":"Chrome","permalink":"https://ebig.vip/tags/Chrome/"},{"name":"工具","slug":"工具","permalink":"https://ebig.vip/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Vant Weapp 安装","slug":"wx-mini/wx-mini-Vant-Weapp","date":"2020-02-20T14:36:54.000Z","updated":"2020-10-01T06:17:32.349Z","comments":true,"path":"wx-mini/wx-mini-Vant-Weapp/","link":"","permalink":"https://ebig.vip/wx-mini/wx-mini-Vant-Weapp/","excerpt":"Vant Weapp是移动端 Vue 组件库 Vant 的小程序版本。 两者基于相同的视觉规范，提供一致的 API 接口。 此文介绍导入小程序项目 的两种详细方式！","text":"npm 安装方式安装node.js由于 Vue是基于 Node.js的,当然少不了Node.js的安装。 由于 官方网站下载速度过慢，本站给出 Node-v12.6.0-x64.msi 下载链接。 这是我使用的 安装步骤， 很详细，一步一步来就行！ 安装Vant Weapp安装好node.js 配好环境后 ，便可以进入项目中了！ 需要注意的是package.json和node_modules 必须在 miniprogram 目录下 操作详细如图： 步骤一 先上图 在cmd中。如果直接输入 下面 ① 命令。将会导致 ** WANRING** 1npm i @vant&#x2F;weapp -S --production 原因是 此文件并没有 package.json和node_modules 这两个文件。 于是需要 ② 命令 1npm init 然后一路都可以 回车，当然也可以写东西！不过还是回车简单 最后再用 ① 命令 即可。 出现的WANRING是因为第二部回车没有填东西的缘故！ 步骤二构建 npm 包 打开微信开发者工具，点击 工具 -&gt; 构建 npm，并勾选 使用 npm 模块 选项，构建完成后，即可引入组件。如图： 构建后的目录结构如图所示： 步骤三将 app.json 中的 “style”: “v2” 去除！ 并且引入组件，为了方便使用，直接在 app.json 全局文件中引用即可！ 附上所有的 组件包引用： 注意：这是 npm构建方式引入包的方式。 全局引入位置： 细心可以发现： 这些路径都是 ① 所对应的的路径！ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&quot;usingComponents&quot;: &#123; &quot;van-icon&quot;: &quot;@vant&#x2F;weapp&#x2F;icon&quot;, &quot;van-button&quot;: &quot;@vant&#x2F;weapp&#x2F;button&quot;, &quot;van-cell&quot;: &quot;@vant&#x2F;weapp&#x2F;cell&quot;, &quot;van-cell-group&quot;: &quot;@vant&#x2F;weapp&#x2F;cell-group&quot;, &quot;van-image&quot;: &quot;@vant&#x2F;weapp&#x2F;image&quot;, &quot;van-row&quot;: &quot;@vant&#x2F;weapp&#x2F;row&quot;, &quot;van-col&quot;: &quot;@vant&#x2F;weapp&#x2F;col&quot;, &quot;van-popup&quot;: &quot;@vant&#x2F;weapp&#x2F;popup&quot;, &quot;van-transition&quot;: &quot;@vant&#x2F;weapp&#x2F;transition&quot;, &quot;van-checkbox&quot;: &quot;@vant&#x2F;weapp&#x2F;checkbox&quot;, &quot;van-checkbox-group&quot;: &quot;@vant&#x2F;weapp&#x2F;checkbox-group&quot;, &quot;van-datetime-picker&quot;: &quot;@vant&#x2F;weapp&#x2F;datetime-picker&quot;, &quot;van-field&quot;: &quot;@vant&#x2F;weapp&#x2F;field&quot;, &quot;van-picker&quot;: &quot;@vant&#x2F;weapp&#x2F;picker&quot;, &quot;van-radio&quot;: &quot;@vant&#x2F;weapp&#x2F;radio&quot;, &quot;van-radio-group&quot;: &quot;@vant&#x2F;weapp&#x2F;radio-group&quot;, &quot;van-rate&quot;: &quot;@vant&#x2F;weapp&#x2F;rate&quot;, &quot;van-search&quot;: &quot;@vant&#x2F;weapp&#x2F;search&quot;, &quot;van-slider&quot;: &quot;@vant&#x2F;weapp&#x2F;slider&quot;, &quot;van-stepper&quot;: &quot;@vant&#x2F;weapp&#x2F;stepper&quot;, &quot;van-switch&quot;: &quot;@vant&#x2F;weapp&#x2F;switch&quot;, &quot;van-uploader&quot;: &quot;@vant&#x2F;weapp&#x2F;uploader&quot;, &quot;van-action-sheet&quot;: &quot;@vant&#x2F;weapp&#x2F;action-sheet&quot;, &quot;van-dialog&quot;: &quot;@vant&#x2F;weapp&#x2F;dialog&quot;, &quot;van-dropdown-menu&quot;: &quot;@vant&#x2F;weapp&#x2F;dropdown-menu&quot;, &quot;van-dropdown-item&quot;: &quot;@vant&#x2F;weapp&#x2F;dropdown-item&quot;, &quot;van-loading&quot;: &quot;@vant&#x2F;weapp&#x2F;loading&quot;, &quot;van-notify&quot;: &quot;@vant&#x2F;weapp&#x2F;notify&quot;, &quot;van-overlay&quot;: &quot;@vant&#x2F;weapp&#x2F;overlay&quot;, &quot;van-swipe-cell&quot;: &quot;@vant&#x2F;weapp&#x2F;swipe-cell&quot;, &quot;van-toast&quot;: &quot;@vant&#x2F;weapp&#x2F;toast&quot;, &quot;van-circle&quot;: &quot;@vant&#x2F;weapp&#x2F;circle&quot;, &quot;van-collapse&quot;: &quot;@vant&#x2F;weapp&#x2F;collapse&quot;, &quot;van-collapse-item&quot;: &quot;@vant&#x2F;weapp&#x2F;collapse-item&quot;, &quot;van-count-down&quot;: &quot;@vant&#x2F;weapp&#x2F;count-down&quot;, &quot;van-divider&quot;: &quot;@vant&#x2F;weapp&#x2F;divider&quot;, &quot;van-notice-bar&quot;: &quot;@vant&#x2F;weapp&#x2F;notice-bar&quot;, &quot;van-panel&quot;: &quot;@vant&#x2F;weapp&#x2F;panel&quot;, &quot;van-progress&quot;: &quot;@vant&#x2F;weapp&#x2F;progress&quot;, &quot;van-skeleton&quot;: &quot;@vant&#x2F;weapp&#x2F;skeleton&quot;, &quot;van-steps&quot;: &quot;@vant&#x2F;weapp&#x2F;steps&quot;, &quot;van-sticky&quot;: &quot;@vant&#x2F;weapp&#x2F;sticky&quot;, &quot;van-tag&quot;: &quot;@vant&#x2F;weapp&#x2F;tag&quot;, &quot;van-tree-select&quot;: &quot;@vant&#x2F;weapp&#x2F;tree-select&quot;, &quot;van-grid&quot;: &quot;@vant&#x2F;weapp&#x2F;grid&quot;, &quot;van-grid-item&quot;: &quot;@vant&#x2F;weapp&#x2F;grid-item&quot;, &quot;van-index-bar&quot;: &quot;@vant&#x2F;weapp&#x2F;index-bar&quot;, &quot;van-index-anchor&quot;: &quot;@vant&#x2F;weapp&#x2F;index-anchor&quot;, &quot;van-sidebar&quot;: &quot;@vant&#x2F;weapp&#x2F;sidebar&quot;, &quot;van-sidebar-item&quot;: &quot;@vant&#x2F;weapp&#x2F;sidebar-item&quot;, &quot;van-nav-bar&quot;: &quot;@vant&#x2F;weapp&#x2F;nav-bar&quot;, &quot;van-tab&quot;: &quot;@vant&#x2F;weapp&#x2F;tab&quot;, &quot;van-tabs&quot;: &quot;@vant&#x2F;weapp&#x2F;tabs&quot;, &quot;van-tabbar&quot;: &quot;@vant&#x2F;weapp&#x2F;tabbar&quot;, &quot;van-tabbar-item&quot;: &quot;@vant&#x2F;weapp&#x2F;tabbar-item&quot;, &quot;van-area&quot;: &quot;@vant&#x2F;weapp&#x2F;area&quot;, &quot;van-card&quot;: &quot;@vant&#x2F;weapp&#x2F;card&quot;, &quot;van-submit-bar&quot;: &quot;@vant&#x2F;weapp&#x2F;submit-bar&quot;, &quot;van-goods-action&quot;: &quot;@vant&#x2F;weapp&#x2F;goods-action&quot;, &quot;van-goods-action-icon&quot;: &quot;@vant&#x2F;weapp&#x2F;goods-action-icon&quot;, &quot;van-goods-action-button&quot;: &quot;@vant&#x2F;weapp&#x2F;goods-action-button&quot; &#125; 下载源码方式vant-demo","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"Vant Weapp","slug":"Vant-Weapp","permalink":"https://ebig.vip/tags/Vant-Weapp/"}]},{"title":"非谷歌官方插件扩展安装","slug":"Plugin-note/Chrome-Plug","date":"2020-02-20T12:37:47.000Z","updated":"2020-10-01T06:17:32.349Z","comments":true,"path":"Plugin-note/Chrome-Plug/","link":"","permalink":"https://ebig.vip/Plugin-note/Chrome-Plug/","excerpt":"谷歌插件自版本后就禁止了非谷歌商店不能安装的插件应用。 网上大部分都是 组策略等信息 那不是Windows家庭版所拥有的功能！","text":"问题如图所示，从 Greasy Fork上下载的js插件 拖拽安装图如图所示： 解决办法 Tampermonkey 俗称油猴。谷歌商店中搜索 一般都是第一个！ 然后就可以了！ 附本站工具下载页 此文章内容用到的 谷歌访问助手","categories":[{"name":"工具","slug":"工具","permalink":"https://ebig.vip/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Chrome","slug":"Chrome","permalink":"https://ebig.vip/tags/Chrome/"},{"name":"工具","slug":"工具","permalink":"https://ebig.vip/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Github 图床","slug":"Hexo/hexo-github-picgo","date":"2020-02-15T07:03:51.000Z","updated":"2020-10-01T06:17:32.349Z","comments":true,"path":"Hexo/hexo-github-picgo/","link":"","permalink":"https://ebig.vip/Hexo/hexo-github-picgo/","excerpt":"搭建Github 图床","text":"图床之前用的七牛云，我以为10G存储应该OK的，发现不是存储的问题，是流量的问题。 存储才用了500M, 发现流量已经超了。并欠费。还不通知！ 主要是七牛云的HTTPS服务开了，这个流量不算免费的里面，所以收费了。当然不开这个。我感觉加载图片应该挺慢的，但下载的确快，过段时间做成下载文件的存储 我找到了GitHub + PicGo 方式做一个图床 但不知道文件 能不能上传下载。 先将图片问题解决了再说。 使用创建一个新的仓库。一定是公开的仓库 然后在 Github -&gt; Settings -&gt; -&gt; personal accese token 这里新建一个 token ，打开 repo 权限，然后将显示的 token 复制出来（最好存下来，这个 token 只会出现一次）。 存住，以后肯定用的到。 然后将相应的东西，填到PicGo上就好了。 jsDelivr加速由于GitHub访问过慢，所以使用jsDelivr加速。 主要是免费 当然，我将文件存在了分支下file/自定义域名为https://cdn.jsdelivr.net/gh/wbig/ebigPic 如果不自定义域名，其默认为https://github.com/wbig/ebigPic 就是将github.com 换为cdn.jsdelivr.net 文件上传图片的上传解决。 注意： PicGo并不能将仓库中的文件删除，它删除的仅仅是这个图的链接。 不支持文件的上传。 我找到一种笨的方法。 上传，然后 使用我的链接 https://wbig.gitee.io/ebigpic/file/UpupooResource.zip 注意：文件不得大于25M。 免费图床Gimhoy图床 网盘直链获取工具v1.2网盘直链获取工具v1.2","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ebig.vip/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ebig.vip/tags/Hexo/"},{"name":"图床","slug":"图床","permalink":"https://ebig.vip/tags/%E5%9B%BE%E5%BA%8A/"}]},{"title":"Axure基础","slug":"Axure/axure-interactive","date":"2020-02-07T05:31:52.000Z","updated":"2020-10-01T06:17:32.350Z","comments":true,"path":"Axure/axure-interactive/","link":"","permalink":"https://ebig.vip/Axure/axure-interactive/","excerpt":"Axure 基本知识！对应于[喵喵酱]Axure 9.0 原型实战班 [1-20]讲","text":"Axure 交互样式 鼠标悬停 鼠标按下 操作如下： 应用场景： 页面导航栏等… 另外设置其他的也是此样式有两种做法： 复制，粘贴… 改内容。 设置选项组 鼠标选中 鼠标禁用 鼠标获取焦点 Axure 条件判断操作如下： 应用： 设置条件，显示或者隐藏，主要是附带条件操作！ 当然还有更简单的方法进行这种设置： Axure 局部变量和全局变量局部变量 ### 全局变量 Axure 层级 与隐藏层级上层会遮挡下层 隐藏隐藏当前元件，但不改变元件的层级。 只是隐藏了！ 在软件中，后托进来的东西是在顶层的。 当然，在原型设置的过程中，通过设置层级关系，来确保功能完整可用！ Axure 元件矩形 变换形状 填充 编辑 序列号 按钮 文本框 边框处理 类型 图片无版权图片网站 动态面板 算是最常用的元件之一，仅次于矩形，实用性最高。 可以使用动态面板做丰富的交互效果，最具特色的元件之一。 双击 进入动态面板的编辑状态！ 状态可以有多种，但是同一时刻只能显示一种。 自适应 实验： 设置不同的状态中 不同大小底色的矩形。 设置交互，可以循环状态！ 在交互中的更多选项中 推动页面内容中其他的元素变化位置！ 循环间隔 ____ 秒 如果隐藏则显示 推动和拉动元件 滚动条面板大小是不变的。 一般是表格。有多行多列。 需要右键手动设置 是滚动行，还是滚动列！ 固定位置一般是广告位！网站客服会话窗口！ 100%宽度一般是导航栏，按照宽度进行自适应！ 手机场景上下拖动进行移动内容！设置交互 设置界限 设置动态面板的大小 顶部 ： &lt;= 0 底部 ： &gt;= 面板高度 中继器中继器是一个容器，是用来承载数据的！ 中继器中添加行，删除行，筛选，排序。 ~~（弃用）预览地址：[中继器](https://4xydxc.axshare.com)~~ 内联框架（弃用）预览地址：内联框架 元件函数窗口函数失败 鼠标指针函数跳过 字符串函数 字符串函数 作用 length 长度 charAt 指定位置的字符 charCodeAt 指定位置Unicode编码 concat 连接多个字符串 indexOf 检索 lastIndexOf 从后向前搜索 replace 替换片段 Slice 提取片段 split 分离 substr 从指定位置提取一定数量的字符 substring 提取片段 toLowerCase 小写 toUpperCase 大写 trim 去除两端空格 中继器函数跳过 日期函数跳过 函数案例","categories":[{"name":"Axure","slug":"Axure","permalink":"https://ebig.vip/categories/Axure/"}],"tags":[{"name":"Axure","slug":"Axure","permalink":"https://ebig.vip/tags/Axure/"}]},{"title":"解除Chrome助手提示","slug":"Plugin-note/Chrome-relieve","date":"2020-02-07T04:37:47.000Z","updated":"2020-10-01T06:17:32.995Z","comments":true,"path":"Plugin-note/Chrome-relieve/","link":"","permalink":"https://ebig.vip/Plugin-note/Chrome-relieve/","excerpt":"在使用Chrome安装一些插件的时候(加载已解压的扩展程序), 会遇到提示“请停用以开发者模式运行的扩展程序”。","text":"Chrome 插件 提示请停用以开发者模式运行的扩展程序： 解决办法网上的补丁方式已经不能使用，因为现在谷歌版本都到 80.0.3970.5 同时我找了很久，找到了注册表方式解决的方法： win + r 打开注册表 按照下面的路径： HKEY_CURRENT_USERSoftwareGoogleUpdateClientState{8A69D345-D564-463c-AFF1-A69D9E530F96} 在空白区右键，并新建一个字符串值： 如图所示： 然后重启浏览器就好！","categories":[{"name":"工具","slug":"工具","permalink":"https://ebig.vip/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Chrome","slug":"Chrome","permalink":"https://ebig.vip/tags/Chrome/"},{"name":"工具","slug":"工具","permalink":"https://ebig.vip/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"小程序模版搭建以及传参","slug":"wx-mini/wx-mini-tpl","date":"2020-02-03T10:11:54.000Z","updated":"2020-10-01T06:17:32.349Z","comments":true,"path":"wx-mini/wx-mini-tpl/","link":"","permalink":"https://ebig.vip/wx-mini/wx-mini-tpl/","excerpt":"WXML提供模板（template），可以在模板中定义代码片段，然后在不同的地方调用。简化代码！","text":"准备页面用tabBar 绘制两个页面，方便测试观察。 12345678910111213141516&quot;tabBar&quot;: &#123; &quot;list&quot;: [ &#123; &quot;iconPath&quot;: &quot;images&#x2F;qq.png&quot;, &quot;selectedIconPath&quot;: &quot;images&#x2F;qq_s.png&quot;, &quot;pagePath&quot;: &quot;pages&#x2F;QQ&#x2F;QQ&quot;, &quot;text&quot;: &quot;QQ&quot; &#125;, &#123; &quot;iconPath&quot;: &quot;images&#x2F;weixin.png&quot;, &quot;selectedIconPath&quot;: &quot;images&#x2F;weixin_s.png&quot;, &quot;pagePath&quot;: &quot;pages&#x2F;WEIXIN&#x2F;WEIXIN&quot;, &quot;text&quot;: &quot;微信&quot; &#125; ]&#125; ps: 路径皆为项目中相对路径！ 模版新建 文件夹templates与pages同级，绘制模版 以及 样式！ 模版在搭建的时候，出现了两个问题 一个是采用 flex弹性布局。使得 消息条的时间 不能浮动。 最后采用了绝对路径锁死在后面了！才使得时间在最后！ 另一个是传参问题！后面介绍！ 模版以及样式表代码如下： 注意： 将数据都定为了动态数据获取：image, noReadCount等 1234567891011121314151617181920212223242526&lt;!--templates&#x2F;messages&#x2F;messages.wxml--&gt;&lt;template name&#x3D;&quot;messages&quot;&gt; &lt;view class&#x3D;&quot;wrapper&quot;&gt; &lt;view class&#x3D;&quot;messages&quot;&gt; &lt;view class&#x3D;&quot;img&quot;&gt; &lt;image src&#x3D;&quot;&#123;&#123;image&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt; &lt;&#x2F;view&gt; &lt;view class&#x3D;&quot;dot&quot; wx:hidden&#x3D;&quot;&#123;&#123;noReadCount&#125;&#125;&quot;&gt; &lt;text&gt;&#123;&#123;noReadCount&#125;&#125;&lt;&#x2F;text&gt; &lt;&#x2F;view&gt; &lt;view class&#x3D;&quot;user-content&quot;&gt; &lt;view class&#x3D;&quot;user&quot;&gt; &lt;text&gt;&#123;&#123;user&#125;&#125;&lt;&#x2F;text&gt; &lt;&#x2F;view&gt; &lt;view class&#x3D;&quot;content&quot;&gt; &lt;text&gt;&#123;&#123;content&#125;&#125;&lt;&#x2F;text&gt; &lt;&#x2F;view&gt; &lt;&#x2F;view&gt; &lt;view class&#x3D;&quot;time&quot;&gt; &lt;text class&#x3D;&quot;time&quot;&gt;&#123;&#123;time&#125;&#125;&lt;&#x2F;text&gt; &lt;&#x2F;view&gt; &lt;&#x2F;view&gt; &lt;&#x2F;view&gt;&lt;&#x2F;template&gt; 模版样式表： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253&#x2F;* templates&#x2F;messages&#x2F;messages.wxss *&#x2F;.messages&#123; height: 100rpx; border-bottom: 1px solid #e4e4e4; display: flex; align-items: center; position: relative; padding-bottom: 5rpx;&#125;.messages .img&#123; width: 80rpx; height: 80rpx; background-color: rgb(160, 151, 151); margin: 0 25rpx 0 15rpx;&#125;.messages .img image&#123; width: 80rpx; height: 80rpx;&#125;.messages .dot&#123; vertical-align: top; color: #fff; font-size: 14px; background-color: red; border-radius: 50%; position: absolute; bottom: 64rpx; left: 71rpx; text-align: center; line-height: 36rpx; width: 36rpx; height: 36rpx;&#125;.messages .user-content&#123; position: relative;&#125;.messages .user-content .user&#123; font-size: 17px; color: #3c3c3c;&#125;.messages .user-content .content&#123; top: -3rpx; font-size: 14px; font-weight: 300; color: #999999;&#125;.messages .time&#123; color: #999999; font-weight: 300; position: absolute; right: 6px;&#125; 使用首先导入模版文件： 12&lt;!--pages&#x2F;*&#x2F;*.wxml文件加入下面这句话--&gt;&lt;import src&#x3D;&quot;..&#x2F;..&#x2F;templates&#x2F;messages&#x2F;messages.wxml&quot;&#x2F;&gt; 12&lt;!--pages&#x2F;*&#x2F;*.wxss文件加入下面这句话--&gt;@import &quot;..&#x2F;..&#x2F;templates&#x2F;messages&#x2F;messages.wxss&quot; 文件目录结构如图（../ 表示回退上一级文件！）：（图片已丢失，见谅） 传参问题在*.js 的data中构建静态数据对象数组： 字段与模版中字段尽量一致！ （图片已丢失，见谅） 两种传参方式 一、在属性中定义data字段并一个个对应复制赋值 （图片已丢失，见谅） 二、在属性data中直接使用...item item是wx:for的数组当前项的变量名。 （图片已丢失，见谅） 效果如图所示： 附带Hexo插入动态图123&lt;div&gt; &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;img.vim-cn.com&#x2F;5f&#x2F;86cac6a7feb269d3dca238190ab86805110255.gif&quot; alt&#x3D;&quot;效果图&quot;&#x2F;&gt;&lt;&#x2F;div&gt; 这种方式比较稳妥。用网上&lt;iframe height=100 width=100 src=&quot;gif 图片地址&quot;&gt;的方式会导致页面的**侧栏**消失，并且在手机端大小并不会相应的动态改变。 所以用原生的方式比较稳妥。 端口占用","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"WXML模版","slug":"WXML模版","permalink":"https://ebig.vip/tags/WXML%E6%A8%A1%E7%89%88/"}]},{"title":"微信小程序专属文件夹测试","slug":"wx-mini/wx-mini-test","date":"2020-02-01T12:38:22.000Z","updated":"2020-10-01T06:17:32.349Z","comments":true,"path":"wx-mini/wx-mini-test/","link":"","permalink":"https://ebig.vip/wx-mini/wx-mini-test/","excerpt":"测试Hexo怎么创建专属文件夹，方便归类写作。 其实也就是熟悉Hexo命令。","text":"命令 参数 描述 -p, --path 自定义新文章的路径 -r, --replace 如果存在同名文章，将其替换 -s, --slug 文章的 Slug，作为新文章的文件名和发布后的 URL 默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。可以使用 --path 参数来覆盖上述行为、自行决定文件的目录： hexo new page –path wx-mini/test “test” 以上命令会创建一个 source/wx-mini/test.md 文件，同时 Front Matter 中的 title 为 “test” 注意！title 是必须指定的！如果你这么做并不能达到你的目的： hexo new page –path wx-mini/test 此时 Hexo 会创建 source/_posts/wx-mini/test.md，同时 test.md 的 Front Matter 中的 title 为 “page”。这是因为在上述命令中，hexo-cli 将 page 视为指定文章的标题、并采用默认的 layout。 总结 我用的第二种方式 12hexo new page --path wx-mini&#x2F;test 因为第一种方式，读不出来文件夹里的内容，并导致标签页与分类页也崩溃了。生成后的结构如下：","categories":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"Hello My Website","slug":"Hello-My-Website","date":"2020-01-23T08:05:51.000Z","updated":"2020-10-01T06:17:32.349Z","comments":true,"path":"Hello-My-Website/","link":"","permalink":"https://ebig.vip/Hello-My-Website/","excerpt":"欢迎来到我的网站! 这是我的第一个线上网站，稍有雏形！","text":"关于网站这是我的第一个线上网站，历经6天，才像个样子！ 此网站部署在Github，我曾经尝试过本地服务器，但内网穿透比较难，知识有限，便搁置了！ 用的Hexo和volantis主题配置。 然后把自己想说的，不想说的，该说的，不该说的，我应该都会在这里写下来。 打断一下我热爱祖国，热爱中国共产党！坚决拥护党的领导。志存高远，振奋精神，做新时代的新青年！ 网站暂未提交到百度检索收录！等真正稳定了，文章有内容干货的时候再提交！ 如果您对网站有任何问题以及见解，欢迎斧正！ 关于名字bigBIG 是室友起的！我是一个念旧的人，怀念大学时光里的有意思的和没意思的。那是我人生中最美好的回忆！ 鲸落BIG依然过去了，鲸落是QQ昵称，也伴随了我大半个大学生活以及现在。 一鲸落，万物生 当然，我做不了这么伟大。哈哈！ 无论走到哪里都应该记住，过去都是假的！ -- 《百年孤独》 生活不应该是我们活过的日子而是我们记住的日子我们为了讲述而在记忆里重现的日子 -- 马尔克斯 致谢感谢网上各路大神的网站源码给予指导。本站基于Hexo，使用Volantis作为主题。","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ebig.vip/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ebig.vip/tags/Hexo/"},{"name":"Volantis","slug":"Volantis","permalink":"https://ebig.vip/tags/Volantis/"}]},{"title":"安装Hexo","slug":"Hexo/hexo-install","date":"2020-01-23T07:03:51.000Z","updated":"2020-10-01T06:17:32.349Z","comments":true,"path":"Hexo/hexo-install/","link":"","permalink":"https://ebig.vip/Hexo/hexo-install/","excerpt":"安装Hexo步骤，包含域名绑定步骤。","text":"安装Gitsudo yum install git-core 安装 Node.js使用以下命令安装 Node.js 1wget -qO- https:&#x2F;&#x2F;raw.github.com&#x2F;creationix&#x2F;nvm&#x2F;master&#x2F;install.sh | sh 更新 1source ~&#x2F;.bash_profile 安装 Node.js 1nvm install stable 安装 Hexo用命令创建 hexo 文件夹 1mkdir hexo 用命令安装 hexo 1npm install -g hexo-cli 初始化 hexo 12cd hexo&#x2F;hexo init 测试安装成功打开 hexo 服务 1hexo server 打开浏览器访问 193.112.162.55:4000 即可看到搭建成功的博客页面 将博客部署到 GitHub如果没有GitHub账户的先去注册，有 GitHub 账户的直接下一步去注册 GitHub 账户设置 user.name 和 user.email把以下命令中的 “Your user.name” 和 “You user.email” 换成自己的 12git config --global user.name &quot;Your user.name&quot;git config --global user.email &quot;You user.email&quot; 生成 ssh 密匙user.email 就是自己注册 GitHub 的邮箱 1ssh-keygen -t rsa -C user.email 下面要输入要保存到的路径 1&#x2F;root&#x2F;.ssh&#x2F;id_rsa 然后直接回车 查看 ssh 密匙 1打开root&#x2F;.ssh&#x2F;id_rsa.pub 在 GitHub 账户下添加 SSH key 去 GitHub 添加 SSH 创建 GitHub 仓库命名格式为”账户的 userName”.github.io 例如 ： 1zhangsan.github.io 去创建 GitHub 仓库 修改 hexo 配置打开 hexo 配置文件 1_config.yml 修改对应部分 1234deploy: type: git repo: git@github.com:(BoView)&#x2F;(BoView).github.io.git #括号里面换成自己的用户名和仓库名,去掉括号 branch: master 保存一下 测试并部署清空静态页面 1hexo clean 生成静态页面 1hexo g 将public文件内容部署到 github 仓库 1hexo d 如果部署遇到错误的时候，先运行下面这条命令 1npm install hexo-deployer-git --save 然后重新部署一下 1hexo d 此时可以打开浏览器访问 userName.github.io(GitHub仓库名) 即可以访问到搭建的博客页面 绑定域名添加解析记录如果想通过域名访问的就继续，前提是要有自己的域名，要是通过上面的仓库名可以访问就满足的可以跳过这一步去自己的域名下添加解析记录类型为 CNAME 主机记录为 @ 线路选择默认，TTL 选择 600，记录值为 github 的仓库名 1userName.github.io 配置 hexo创建 CNAME 配置文件 1touch ~&#x2F;hexo&#x2F;source&#x2F;CNAME 去 CNAME 文件 下添加刚才解析的域名 例如： zhangsan.com然后重新部署一下 12hexo ghexo d","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://ebig.vip/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ebig.vip/tags/Hexo/"}]}],"categories":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/categories/Web%E5%89%8D%E7%AB%AF/"},{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"工具","slug":"工具","permalink":"https://ebig.vip/categories/%E5%B7%A5%E5%85%B7/"},{"name":"Hexo","slug":"Hexo","permalink":"https://ebig.vip/categories/Hexo/"},{"name":"Axure","slug":"Axure","permalink":"https://ebig.vip/categories/Axure/"}],"tags":[{"name":"Web前端","slug":"Web前端","permalink":"https://ebig.vip/tags/Web%E5%89%8D%E7%AB%AF/"},{"name":"css","slug":"css","permalink":"https://ebig.vip/tags/css/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://ebig.vip/tags/JavaScript/"},{"name":"http协议","slug":"http协议","permalink":"https://ebig.vip/tags/http%E5%8D%8F%E8%AE%AE/"},{"name":"微信小程序","slug":"微信小程序","permalink":"https://ebig.vip/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"云存储","slug":"云存储","permalink":"https://ebig.vip/tags/%E4%BA%91%E5%AD%98%E5%82%A8/"},{"name":"云数据库","slug":"云数据库","permalink":"https://ebig.vip/tags/%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"js异步操作","slug":"js异步操作","permalink":"https://ebig.vip/tags/js%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/"},{"name":"自定义组件","slug":"自定义组件","permalink":"https://ebig.vip/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"},{"name":"tcb router","slug":"tcb-router","permalink":"https://ebig.vip/tags/tcb-router/"},{"name":"Chrome","slug":"Chrome","permalink":"https://ebig.vip/tags/Chrome/"},{"name":"工具","slug":"工具","permalink":"https://ebig.vip/tags/%E5%B7%A5%E5%85%B7/"},{"name":"Vant Weapp","slug":"Vant-Weapp","permalink":"https://ebig.vip/tags/Vant-Weapp/"},{"name":"Hexo","slug":"Hexo","permalink":"https://ebig.vip/tags/Hexo/"},{"name":"图床","slug":"图床","permalink":"https://ebig.vip/tags/%E5%9B%BE%E5%BA%8A/"},{"name":"Axure","slug":"Axure","permalink":"https://ebig.vip/tags/Axure/"},{"name":"WXML模版","slug":"WXML模版","permalink":"https://ebig.vip/tags/WXML%E6%A8%A1%E7%89%88/"},{"name":"Volantis","slug":"Volantis","permalink":"https://ebig.vip/tags/Volantis/"}]}